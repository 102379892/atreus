// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mapgoo.paas.live.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//直播类型
type TYPE_LIVE int32

const (
	TYPE_LIVE_LIVE_DEFAULT TYPE_LIVE = 0
	TYPE_LIVE_RTMP         TYPE_LIVE = 1
	TYPE_LIVE_HLS          TYPE_LIVE = 2
)

var TYPE_LIVE_name = map[int32]string{
	0: "LIVE_DEFAULT",
	1: "RTMP",
	2: "HLS",
}

var TYPE_LIVE_value = map[string]int32{
	"LIVE_DEFAULT": 0,
	"RTMP":         1,
	"HLS":          2,
}

func (x TYPE_LIVE) String() string {
	return proto.EnumName(TYPE_LIVE_name, int32(x))
}

func (TYPE_LIVE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{0}
}

//云类型
type EM_CLOUD_TYPE int32

const (
	//京东云
	EM_CLOUD_TYPE_EM_CLOUD_JD EM_CLOUD_TYPE = 0
	//阿里云
	EM_CLOUD_TYPE_EM_CLOUD_ALI EM_CLOUD_TYPE = 1
)

var EM_CLOUD_TYPE_name = map[int32]string{
	0: "EM_CLOUD_JD",
	1: "EM_CLOUD_ALI",
}

var EM_CLOUD_TYPE_value = map[string]int32{
	"EM_CLOUD_JD":  0,
	"EM_CLOUD_ALI": 1,
}

func (x EM_CLOUD_TYPE) String() string {
	return proto.EnumName(EM_CLOUD_TYPE_name, int32(x))
}

func (EM_CLOUD_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{1}
}

//视频文件类型
type SOURCE_TYPE int32

const (
	SOURCE_TYPE_DEFAULT SOURCE_TYPE = 0
	SOURCE_TYPE_DEV     SOURCE_TYPE = 1
	SOURCE_TYPE_CLOUD   SOURCE_TYPE = 2
)

var SOURCE_TYPE_name = map[int32]string{
	0: "DEFAULT",
	1: "DEV",
	2: "CLOUD",
}

var SOURCE_TYPE_value = map[string]int32{
	"DEFAULT": 0,
	"DEV":     1,
	"CLOUD":   2,
}

func (x SOURCE_TYPE) String() string {
	return proto.EnumName(SOURCE_TYPE_name, int32(x))
}

func (SOURCE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{2}
}

//直播摄像头状态
type CAMERA_STATE int32

const (
	CAMERA_STATE_CAMERA_DEFAULT        CAMERA_STATE = 0
	CAMERA_STATE_CAMERA_STATE_OFFLINE  CAMERA_STATE = 1
	CAMERA_STATE_CAMERA_STATE_ONLINE   CAMERA_STATE = 2
	CAMERA_STATE_CAMERA_STATE_NOT_EXST CAMERA_STATE = 3
	CAMERA_STATE_CAMERA_STATE_SLEEP    CAMERA_STATE = 4
	CAMERA_STATE_CAMERA_STATE_END      CAMERA_STATE = 255
)

var CAMERA_STATE_name = map[int32]string{
	0:   "CAMERA_DEFAULT",
	1:   "CAMERA_STATE_OFFLINE",
	2:   "CAMERA_STATE_ONLINE",
	3:   "CAMERA_STATE_NOT_EXST",
	4:   "CAMERA_STATE_SLEEP",
	255: "CAMERA_STATE_END",
}

var CAMERA_STATE_value = map[string]int32{
	"CAMERA_DEFAULT":        0,
	"CAMERA_STATE_OFFLINE":  1,
	"CAMERA_STATE_ONLINE":   2,
	"CAMERA_STATE_NOT_EXST": 3,
	"CAMERA_STATE_SLEEP":    4,
	"CAMERA_STATE_END":      255,
}

func (x CAMERA_STATE) String() string {
	return proto.EnumName(CAMERA_STATE_name, int32(x))
}

func (CAMERA_STATE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{3}
}

//直播摄像头类型
type CAMERA_TYPE int32

const (
	CAMERA_TYPE_CAMERA_TYPE_DEFAULT         CAMERA_TYPE = 0
	CAMERA_TYPE_CAMERA_TYPE_FROUNT          CAMERA_TYPE = 1
	CAMERA_TYPE_CAMERA_TYPE_BACK            CAMERA_TYPE = 2
	CAMERA_TYPE_CAMERA_TYPE_MID             CAMERA_TYPE = 3
	CAMERA_TYPE_CAMERA_TYPE_FROUNT_BACK     CAMERA_TYPE = 4
	CAMERA_TYPE_CAMERA_TYPE_FRNOT_MID       CAMERA_TYPE = 5
	CAMERA_TYPE_CAMERA_TYPE_BACK_MID        CAMERA_TYPE = 6
	CAMERA_TYPE_CAMERA_TYPE_FROUNT_BACK_MID CAMERA_TYPE = 7
	CAMERA_TYPE_CAMERA_TYPE_END             CAMERA_TYPE = 255
)

var CAMERA_TYPE_name = map[int32]string{
	0:   "CAMERA_TYPE_DEFAULT",
	1:   "CAMERA_TYPE_FROUNT",
	2:   "CAMERA_TYPE_BACK",
	3:   "CAMERA_TYPE_MID",
	4:   "CAMERA_TYPE_FROUNT_BACK",
	5:   "CAMERA_TYPE_FRNOT_MID",
	6:   "CAMERA_TYPE_BACK_MID",
	7:   "CAMERA_TYPE_FROUNT_BACK_MID",
	255: "CAMERA_TYPE_END",
}

var CAMERA_TYPE_value = map[string]int32{
	"CAMERA_TYPE_DEFAULT":         0,
	"CAMERA_TYPE_FROUNT":          1,
	"CAMERA_TYPE_BACK":            2,
	"CAMERA_TYPE_MID":             3,
	"CAMERA_TYPE_FROUNT_BACK":     4,
	"CAMERA_TYPE_FRNOT_MID":       5,
	"CAMERA_TYPE_BACK_MID":        6,
	"CAMERA_TYPE_FROUNT_BACK_MID": 7,
	"CAMERA_TYPE_END":             255,
}

func (x CAMERA_TYPE) String() string {
	return proto.EnumName(CAMERA_TYPE_name, int32(x))
}

func (CAMERA_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{4}
}

//媒体类型
type MEDIA_TYPE int32

const (
	MEDIA_TYPE_MEDIA_TYPE_DEFAULT MEDIA_TYPE = 0
	MEDIA_TYPE_MEDIA_TYPE_PIC     MEDIA_TYPE = 1
	MEDIA_TYPE_MEDIA_TYPE_VIDEO   MEDIA_TYPE = 2
)

var MEDIA_TYPE_name = map[int32]string{
	0: "MEDIA_TYPE_DEFAULT",
	1: "MEDIA_TYPE_PIC",
	2: "MEDIA_TYPE_VIDEO",
}

var MEDIA_TYPE_value = map[string]int32{
	"MEDIA_TYPE_DEFAULT": 0,
	"MEDIA_TYPE_PIC":     1,
	"MEDIA_TYPE_VIDEO":   2,
}

func (x MEDIA_TYPE) String() string {
	return proto.EnumName(MEDIA_TYPE_name, int32(x))
}

func (MEDIA_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{5}
}

//获取直播信息请求参数
type LiveParam struct {
	//设备id和imei
	DeviceId *DeviceId `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	//直播类型，0表示rtmp,1表示hls
	LiveType TYPE_LIVE `protobuf:"varint,2,opt,name=live_type,json=liveType,proto3,enum=mapgoo.paas.live.TYPE_LIVE" json:"live_type,omitempty"`
	//摄像头通道
	Channel uint32 `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
	//用户Id
	UserId uint32 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	//视频id
	SsvId string `protobuf:"bytes,5,opt,name=ssv_id,json=ssvId,proto3" json:"ssv_id,omitempty"`
	//上一次摄像头通道
	PreChannel uint32 `protobuf:"varint,6,opt,name=pre_channel,json=preChannel,proto3" json:"pre_channel,omitempty"`
	//重试次数
	Times                uint64   `protobuf:"varint,7,opt,name=times,proto3" json:"times,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveParam) Reset()         { *m = LiveParam{} }
func (m *LiveParam) String() string { return proto.CompactTextString(m) }
func (*LiveParam) ProtoMessage()    {}
func (*LiveParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{0}
}

func (m *LiveParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveParam.Unmarshal(m, b)
}
func (m *LiveParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveParam.Marshal(b, m, deterministic)
}
func (m *LiveParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveParam.Merge(m, src)
}
func (m *LiveParam) XXX_Size() int {
	return xxx_messageInfo_LiveParam.Size(m)
}
func (m *LiveParam) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveParam.DiscardUnknown(m)
}

var xxx_messageInfo_LiveParam proto.InternalMessageInfo

func (m *LiveParam) GetDeviceId() *DeviceId {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *LiveParam) GetLiveType() TYPE_LIVE {
	if m != nil {
		return m.LiveType
	}
	return TYPE_LIVE_LIVE_DEFAULT
}

func (m *LiveParam) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *LiveParam) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LiveParam) GetSsvId() string {
	if m != nil {
		return m.SsvId
	}
	return ""
}

func (m *LiveParam) GetPreChannel() uint32 {
	if m != nil {
		return m.PreChannel
	}
	return 0
}

func (m *LiveParam) GetTimes() uint64 {
	if m != nil {
		return m.Times
	}
	return 0
}

//直播信息
type LiveInfo struct {
	//设备id
	ObjectId uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//设备imei
	Imei string `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	//直播地址
	LiveUrl string `protobuf:"bytes,3,opt,name=live_url,json=liveUrl,proto3" json:"live_url,omitempty"`
	//视频id
	SsvId string `protobuf:"bytes,4,opt,name=ssv_id,json=ssvId,proto3" json:"ssv_id,omitempty"`
	//请求token
	Token string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	//设备状态
	DeviceType uint32 `protobuf:"varint,6,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	//状态
	Status uint32 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	//更新时间
	UpdateTime string `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	//设备个数
	SsvidCount uint32 `protobuf:"varint,9,opt,name=ssvid_count,json=ssvidCount,proto3" json:"ssvid_count,omitempty"`
	//设备类型
	MdtTypeId uint32 `protobuf:"varint,10,opt,name=mdt_type_id,json=mdtTypeId,proto3" json:"mdt_type_id,omitempty"`
	//等待时间
	WaitTime             uint64   `protobuf:"varint,11,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveInfo) Reset()         { *m = LiveInfo{} }
func (m *LiveInfo) String() string { return proto.CompactTextString(m) }
func (*LiveInfo) ProtoMessage()    {}
func (*LiveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{1}
}

func (m *LiveInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveInfo.Unmarshal(m, b)
}
func (m *LiveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveInfo.Marshal(b, m, deterministic)
}
func (m *LiveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveInfo.Merge(m, src)
}
func (m *LiveInfo) XXX_Size() int {
	return xxx_messageInfo_LiveInfo.Size(m)
}
func (m *LiveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LiveInfo proto.InternalMessageInfo

func (m *LiveInfo) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *LiveInfo) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *LiveInfo) GetLiveUrl() string {
	if m != nil {
		return m.LiveUrl
	}
	return ""
}

func (m *LiveInfo) GetSsvId() string {
	if m != nil {
		return m.SsvId
	}
	return ""
}

func (m *LiveInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LiveInfo) GetDeviceType() uint32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *LiveInfo) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *LiveInfo) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *LiveInfo) GetSsvidCount() uint32 {
	if m != nil {
		return m.SsvidCount
	}
	return 0
}

func (m *LiveInfo) GetMdtTypeId() uint32 {
	if m != nil {
		return m.MdtTypeId
	}
	return 0
}

func (m *LiveInfo) GetWaitTime() uint64 {
	if m != nil {
		return m.WaitTime
	}
	return 0
}

//驾驶行为事件
type DrivingBehavior struct {
	//设备id
	ObjectId uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//驾驶行为类型
	DriveEventType uint32 `protobuf:"varint,2,opt,name=drive_event_type,json=driveEventType,proto3" json:"drive_event_type,omitempty"`
	//行程id
	TravelId uint32 `protobuf:"varint,3,opt,name=travel_id,json=travelId,proto3" json:"travel_id,omitempty"`
	//驾驶行为事件的开始时间
	DriveEventStartTime string `protobuf:"bytes,4,opt,name=drive_event_start_time,json=driveEventStartTime,proto3" json:"drive_event_start_time,omitempty"`
	//驾驶行为事件的结束时间
	DriveEventStopTime string `protobuf:"bytes,5,opt,name=drive_event_stop_time,json=driveEventStopTime,proto3" json:"drive_event_stop_time,omitempty"`
	//创建时间
	CreateTime uint64 `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	//更新时间
	UpdateTime uint64 `protobuf:"varint,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	//开始经度
	StartLng int32 `protobuf:"varint,8,opt,name=start_lng,json=startLng,proto3" json:"start_lng,omitempty"`
	//开始纬度
	StartLat int32 `protobuf:"varint,9,opt,name=start_lat,json=startLat,proto3" json:"start_lat,omitempty"`
	//结束经度
	StopLng int32 `protobuf:"varint,10,opt,name=stop_lng,json=stopLng,proto3" json:"stop_lng,omitempty"`
	//结束纬度
	StopLat              int32    `protobuf:"varint,11,opt,name=stop_lat,json=stopLat,proto3" json:"stop_lat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DrivingBehavior) Reset()         { *m = DrivingBehavior{} }
func (m *DrivingBehavior) String() string { return proto.CompactTextString(m) }
func (*DrivingBehavior) ProtoMessage()    {}
func (*DrivingBehavior) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{2}
}

func (m *DrivingBehavior) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DrivingBehavior.Unmarshal(m, b)
}
func (m *DrivingBehavior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DrivingBehavior.Marshal(b, m, deterministic)
}
func (m *DrivingBehavior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrivingBehavior.Merge(m, src)
}
func (m *DrivingBehavior) XXX_Size() int {
	return xxx_messageInfo_DrivingBehavior.Size(m)
}
func (m *DrivingBehavior) XXX_DiscardUnknown() {
	xxx_messageInfo_DrivingBehavior.DiscardUnknown(m)
}

var xxx_messageInfo_DrivingBehavior proto.InternalMessageInfo

func (m *DrivingBehavior) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *DrivingBehavior) GetDriveEventType() uint32 {
	if m != nil {
		return m.DriveEventType
	}
	return 0
}

func (m *DrivingBehavior) GetTravelId() uint32 {
	if m != nil {
		return m.TravelId
	}
	return 0
}

func (m *DrivingBehavior) GetDriveEventStartTime() string {
	if m != nil {
		return m.DriveEventStartTime
	}
	return ""
}

func (m *DrivingBehavior) GetDriveEventStopTime() string {
	if m != nil {
		return m.DriveEventStopTime
	}
	return ""
}

func (m *DrivingBehavior) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *DrivingBehavior) GetUpdateTime() uint64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *DrivingBehavior) GetStartLng() int32 {
	if m != nil {
		return m.StartLng
	}
	return 0
}

func (m *DrivingBehavior) GetStartLat() int32 {
	if m != nil {
		return m.StartLat
	}
	return 0
}

func (m *DrivingBehavior) GetStopLng() int32 {
	if m != nil {
		return m.StopLng
	}
	return 0
}

func (m *DrivingBehavior) GetStopLat() int32 {
	if m != nil {
		return m.StopLat
	}
	return 0
}

//视频标签
type DriveEventLable struct {
	//标签id
	EventId uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	//设备ObjectId
	ObjectId uint32 `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//标签类型，1-驾驶事件，2-用户自定义，3-AI事件
	LableType uint32 `protobuf:"varint,3,opt,name=lable_type,json=lableType,proto3" json:"lable_type,omitempty"`
	//标签二级类型，如驾驶事件（0-急加速 1-急减速 2-急转弯）
	LableSubType uint32 `protobuf:"varint,4,opt,name=lable_sub_type,json=lableSubType,proto3" json:"lable_sub_type,omitempty"`
	//标签文字说明
	LableDesc string `protobuf:"bytes,5,opt,name=lable_desc,json=lableDesc,proto3" json:"lable_desc,omitempty"`
	//定位时间
	GpsTime string `protobuf:"bytes,6,opt,name=gps_time,json=gpsTime,proto3" json:"gps_time,omitempty"`
	//接收时间
	RcvTime string `protobuf:"bytes,7,opt,name=rcv_time,json=rcvTime,proto3" json:"rcv_time,omitempty"`
	//开始经度
	StartLon int32 `protobuf:"varint,8,opt,name=start_lon,json=startLon,proto3" json:"start_lon,omitempty"`
	//开始纬度
	StartLat int32 `protobuf:"varint,9,opt,name=start_lat,json=startLat,proto3" json:"start_lat,omitempty"`
	//开始时间
	StartTime string `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//结束经度
	StopLon int32 `protobuf:"varint,11,opt,name=stop_lon,json=stopLon,proto3" json:"stop_lon,omitempty"`
	//结束纬度
	StopLat int32 `protobuf:"varint,12,opt,name=stop_lat,json=stopLat,proto3" json:"stop_lat,omitempty"`
	//结束时间
	StopTime             string   `protobuf:"bytes,13,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DriveEventLable) Reset()         { *m = DriveEventLable{} }
func (m *DriveEventLable) String() string { return proto.CompactTextString(m) }
func (*DriveEventLable) ProtoMessage()    {}
func (*DriveEventLable) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{3}
}

func (m *DriveEventLable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriveEventLable.Unmarshal(m, b)
}
func (m *DriveEventLable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriveEventLable.Marshal(b, m, deterministic)
}
func (m *DriveEventLable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriveEventLable.Merge(m, src)
}
func (m *DriveEventLable) XXX_Size() int {
	return xxx_messageInfo_DriveEventLable.Size(m)
}
func (m *DriveEventLable) XXX_DiscardUnknown() {
	xxx_messageInfo_DriveEventLable.DiscardUnknown(m)
}

var xxx_messageInfo_DriveEventLable proto.InternalMessageInfo

func (m *DriveEventLable) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *DriveEventLable) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *DriveEventLable) GetLableType() uint32 {
	if m != nil {
		return m.LableType
	}
	return 0
}

func (m *DriveEventLable) GetLableSubType() uint32 {
	if m != nil {
		return m.LableSubType
	}
	return 0
}

func (m *DriveEventLable) GetLableDesc() string {
	if m != nil {
		return m.LableDesc
	}
	return ""
}

func (m *DriveEventLable) GetGpsTime() string {
	if m != nil {
		return m.GpsTime
	}
	return ""
}

func (m *DriveEventLable) GetRcvTime() string {
	if m != nil {
		return m.RcvTime
	}
	return ""
}

func (m *DriveEventLable) GetStartLon() int32 {
	if m != nil {
		return m.StartLon
	}
	return 0
}

func (m *DriveEventLable) GetStartLat() int32 {
	if m != nil {
		return m.StartLat
	}
	return 0
}

func (m *DriveEventLable) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *DriveEventLable) GetStopLon() int32 {
	if m != nil {
		return m.StopLon
	}
	return 0
}

func (m *DriveEventLable) GetStopLat() int32 {
	if m != nil {
		return m.StopLat
	}
	return 0
}

func (m *DriveEventLable) GetStopTime() string {
	if m != nil {
		return m.StopTime
	}
	return ""
}

//设备事件信息（产生事件）
type DeviceEvent struct {
	//事件ID
	EventId uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	//设备ObjectId
	ObjectId uint32 `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//设备(云镜)序列号
	DeviceId string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	//事件类型 1-ACC点火、2-ACC熄火、3-急刹、4-锁影
	EventType uint32 `protobuf:"varint,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	//事件触发时间
	EventTime string `protobuf:"bytes,5,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	//是否收藏 1-已收藏 0-未收藏
	IsLoved uint32 `protobuf:"varint,6,opt,name=is_loved,json=isLoved,proto3" json:"is_loved,omitempty"`
	//事件发生时的经度
	Lng int32 `protobuf:"varint,7,opt,name=lng,proto3" json:"lng,omitempty"`
	//纬度
	Lat int32 `protobuf:"varint,8,opt,name=lat,proto3" json:"lat,omitempty"`
	//速度
	Speed uint32 `protobuf:"varint,9,opt,name=speed,proto3" json:"speed,omitempty"`
	//方向
	Direct uint32 `protobuf:"varint,10,opt,name=direct,proto3" json:"direct,omitempty"`
	//定位时间
	Gpstime uint32 `protobuf:"varint,11,opt,name=gpstime,proto3" json:"gpstime,omitempty"`
	//关键视频云端url
	KeyVideoUrl []string `protobuf:"bytes,12,rep,name=key_video_url,json=keyVideoUrl,proto3" json:"key_video_url,omitempty"`
	//视频开始时间，精确到毫秒
	VideoBtime uint64 `protobuf:"varint,13,opt,name=video_btime,json=videoBtime,proto3" json:"video_btime,omitempty"`
	//视频结束时间，精确到毫秒
	VideoEtime uint64 `protobuf:"varint,14,opt,name=video_etime,json=videoEtime,proto3" json:"video_etime,omitempty"`
	//视频大小，单位（kb）
	VideoSize uint32 `protobuf:"varint,15,opt,name=video_size,json=videoSize,proto3" json:"video_size,omitempty"`
	//关键视频实际在云镜中的存储路径
	KeyVideoPath string `protobuf:"bytes,16,opt,name=key_video_path,json=keyVideoPath,proto3" json:"key_video_path,omitempty"`
	//关键图片云端url
	KeyImageUrl []string `protobuf:"bytes,17,rep,name=key_image_url,json=keyImageUrl,proto3" json:"key_image_url,omitempty"`
	//图片抽帧时间，精确到毫秒
	ImageTime string `protobuf:"bytes,18,opt,name=image_time,json=imageTime,proto3" json:"image_time,omitempty"`
	//图片大小，单位（kb）
	ImageSize uint32 `protobuf:"varint,19,opt,name=image_size,json=imageSize,proto3" json:"image_size,omitempty"`
	//关键视频缩略图的云端url
	KeyThumUrl string `protobuf:"bytes,20,opt,name=key_thum_url,json=keyThumUrl,proto3" json:"key_thum_url,omitempty"`
	//原始视频实际在云镜中的存储路径
	OriVideoPath string `protobuf:"bytes,21,opt,name=ori_video_path,json=oriVideoPath,proto3" json:"ori_video_path,omitempty"`
	//关联视频在云镜中的存储路径
	RelVideoPath []string `protobuf:"bytes,22,rep,name=rel_video_path,json=relVideoPath,proto3" json:"rel_video_path,omitempty"`
	//是添加水印 1：添加
	WaterMark            uint32   `protobuf:"varint,23,opt,name=water_mark,json=waterMark,proto3" json:"water_mark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceEvent) Reset()         { *m = DeviceEvent{} }
func (m *DeviceEvent) String() string { return proto.CompactTextString(m) }
func (*DeviceEvent) ProtoMessage()    {}
func (*DeviceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{4}
}

func (m *DeviceEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceEvent.Unmarshal(m, b)
}
func (m *DeviceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceEvent.Marshal(b, m, deterministic)
}
func (m *DeviceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceEvent.Merge(m, src)
}
func (m *DeviceEvent) XXX_Size() int {
	return xxx_messageInfo_DeviceEvent.Size(m)
}
func (m *DeviceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceEvent proto.InternalMessageInfo

func (m *DeviceEvent) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *DeviceEvent) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *DeviceEvent) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceEvent) GetEventType() uint32 {
	if m != nil {
		return m.EventType
	}
	return 0
}

func (m *DeviceEvent) GetEventTime() string {
	if m != nil {
		return m.EventTime
	}
	return ""
}

func (m *DeviceEvent) GetIsLoved() uint32 {
	if m != nil {
		return m.IsLoved
	}
	return 0
}

func (m *DeviceEvent) GetLng() int32 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *DeviceEvent) GetLat() int32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *DeviceEvent) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *DeviceEvent) GetDirect() uint32 {
	if m != nil {
		return m.Direct
	}
	return 0
}

func (m *DeviceEvent) GetGpstime() uint32 {
	if m != nil {
		return m.Gpstime
	}
	return 0
}

func (m *DeviceEvent) GetKeyVideoUrl() []string {
	if m != nil {
		return m.KeyVideoUrl
	}
	return nil
}

func (m *DeviceEvent) GetVideoBtime() uint64 {
	if m != nil {
		return m.VideoBtime
	}
	return 0
}

func (m *DeviceEvent) GetVideoEtime() uint64 {
	if m != nil {
		return m.VideoEtime
	}
	return 0
}

func (m *DeviceEvent) GetVideoSize() uint32 {
	if m != nil {
		return m.VideoSize
	}
	return 0
}

func (m *DeviceEvent) GetKeyVideoPath() string {
	if m != nil {
		return m.KeyVideoPath
	}
	return ""
}

func (m *DeviceEvent) GetKeyImageUrl() []string {
	if m != nil {
		return m.KeyImageUrl
	}
	return nil
}

func (m *DeviceEvent) GetImageTime() string {
	if m != nil {
		return m.ImageTime
	}
	return ""
}

func (m *DeviceEvent) GetImageSize() uint32 {
	if m != nil {
		return m.ImageSize
	}
	return 0
}

func (m *DeviceEvent) GetKeyThumUrl() string {
	if m != nil {
		return m.KeyThumUrl
	}
	return ""
}

func (m *DeviceEvent) GetOriVideoPath() string {
	if m != nil {
		return m.OriVideoPath
	}
	return ""
}

func (m *DeviceEvent) GetRelVideoPath() []string {
	if m != nil {
		return m.RelVideoPath
	}
	return nil
}

func (m *DeviceEvent) GetWaterMark() uint32 {
	if m != nil {
		return m.WaterMark
	}
	return 0
}

//目录树
type MediaFileIndex struct {
	//目录ID，使用雪花算法生成
	IndexId uint32 `protobuf:"varint,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	//设备ID
	ObjectId uint32 `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//设备imei
	Imei uint32 `protobuf:"varint,3,opt,name=imei,proto3" json:"imei,omitempty"`
	//设备摄像头通道号
	Channel uint32 `protobuf:"varint,4,opt,name=channel,proto3" json:"channel,omitempty"`
	//设备本地文件名
	LocalFileName string `protobuf:"bytes,5,opt,name=local_file_name,json=localFileName,proto3" json:"local_file_name,omitempty"`
	//设备本地文件路径，带文件名
	LocalFilePath string `protobuf:"bytes,6,opt,name=local_file_path,json=localFilePath,proto3" json:"local_file_path,omitempty"`
	//文件格式,例如：MP4 AVI
	FileFormat string `protobuf:"bytes,7,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	//文件大小，以kb为单位
	FileSize uint32 `protobuf:"varint,8,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	//分辨率， 0-1080p 1-720p 2-480p 3-240p 4-120p
	Resolution uint32 `protobuf:"varint,9,opt,name=resolution,proto3" json:"resolution,omitempty"`
	//码率
	Rate uint32 `protobuf:"varint,10,opt,name=rate,proto3" json:"rate,omitempty"`
	//文件类型，0-设备本地录制， 1-直播录制
	FileType uint32 `protobuf:"varint,11,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	//文件存储类型，按比特位存储，第一个bit为保存设备本地存储标记，第二个bit位保存云端存储标记，例如：0x0001表示设备本地已保存 0x0003-设备云端和本地都保存
	StorageType uint32 `protobuf:"varint,12,opt,name=storage_type,json=storageType,proto3" json:"storage_type,omitempty"`
	//若文件保存到了云端，则字段表示云存储的url，若未保存，此字段为NULL
	CloudUrl string `protobuf:"bytes,13,opt,name=cloud_url,json=cloudUrl,proto3" json:"cloud_url,omitempty"`
	//视频文件缩略图URL
	ThumbUrl string `protobuf:"bytes,14,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url,omitempty"`
	//视频录制的开始时间
	BeginTime string `protobuf:"bytes,15,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	//视频录制的结束时间
	EndTime string `protobuf:"bytes,16,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	//文件修改（包括创建、删除和修改）时间
	FileModifyTime string `protobuf:"bytes,17,opt,name=file_modify_time,json=fileModifyTime,proto3" json:"file_modify_time,omitempty"`
	//视频时长
	Duration uint32 `protobuf:"varint,18,opt,name=duration,proto3" json:"duration,omitempty"`
	//目录版本号，取值服务端生成目录的时间
	Version uint32 `protobuf:"varint,19,opt,name=version,proto3" json:"version,omitempty"`
	//视频存储到京东aws的目录名
	AwsBucketName string `protobuf:"bytes,20,opt,name=aws_bucket_name,json=awsBucketName,proto3" json:"aws_bucket_name,omitempty"`
	//视频存储到京东aws的文件名
	AwsFileName string `protobuf:"bytes,21,opt,name=aws_file_name,json=awsFileName,proto3" json:"aws_file_name,omitempty"`
	//视频文件元数据在视频文件中的偏移量（单位：字节）
	MetaDataOffset uint32 `protobuf:"varint,22,opt,name=meta_data_offset,json=metaDataOffset,proto3" json:"meta_data_offset,omitempty"`
	//视频文件元数据大小（单位：字节）
	MetaDataSize uint32 `protobuf:"varint,23,opt,name=meta_data_size,json=metaDataSize,proto3" json:"meta_data_size,omitempty"`
	//记录插入时间
	InsertTime string `protobuf:"bytes,24,opt,name=insert_time,json=insertTime,proto3" json:"insert_time,omitempty"`
	//记录更新时间
	UpdateTime string `protobuf:"bytes,25,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	//云存储类型 0-京东云 1-阿里云
	CloudType            EM_CLOUD_TYPE `protobuf:"varint,26,opt,name=cloud_type,json=cloudType,proto3,enum=mapgoo.paas.live.EM_CLOUD_TYPE" json:"cloud_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MediaFileIndex) Reset()         { *m = MediaFileIndex{} }
func (m *MediaFileIndex) String() string { return proto.CompactTextString(m) }
func (*MediaFileIndex) ProtoMessage()    {}
func (*MediaFileIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{5}
}

func (m *MediaFileIndex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaFileIndex.Unmarshal(m, b)
}
func (m *MediaFileIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaFileIndex.Marshal(b, m, deterministic)
}
func (m *MediaFileIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaFileIndex.Merge(m, src)
}
func (m *MediaFileIndex) XXX_Size() int {
	return xxx_messageInfo_MediaFileIndex.Size(m)
}
func (m *MediaFileIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaFileIndex.DiscardUnknown(m)
}

var xxx_messageInfo_MediaFileIndex proto.InternalMessageInfo

func (m *MediaFileIndex) GetIndexId() uint32 {
	if m != nil {
		return m.IndexId
	}
	return 0
}

func (m *MediaFileIndex) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *MediaFileIndex) GetImei() uint32 {
	if m != nil {
		return m.Imei
	}
	return 0
}

func (m *MediaFileIndex) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *MediaFileIndex) GetLocalFileName() string {
	if m != nil {
		return m.LocalFileName
	}
	return ""
}

func (m *MediaFileIndex) GetLocalFilePath() string {
	if m != nil {
		return m.LocalFilePath
	}
	return ""
}

func (m *MediaFileIndex) GetFileFormat() string {
	if m != nil {
		return m.FileFormat
	}
	return ""
}

func (m *MediaFileIndex) GetFileSize() uint32 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *MediaFileIndex) GetResolution() uint32 {
	if m != nil {
		return m.Resolution
	}
	return 0
}

func (m *MediaFileIndex) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *MediaFileIndex) GetFileType() uint32 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *MediaFileIndex) GetStorageType() uint32 {
	if m != nil {
		return m.StorageType
	}
	return 0
}

func (m *MediaFileIndex) GetCloudUrl() string {
	if m != nil {
		return m.CloudUrl
	}
	return ""
}

func (m *MediaFileIndex) GetThumbUrl() string {
	if m != nil {
		return m.ThumbUrl
	}
	return ""
}

func (m *MediaFileIndex) GetBeginTime() string {
	if m != nil {
		return m.BeginTime
	}
	return ""
}

func (m *MediaFileIndex) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *MediaFileIndex) GetFileModifyTime() string {
	if m != nil {
		return m.FileModifyTime
	}
	return ""
}

func (m *MediaFileIndex) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MediaFileIndex) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MediaFileIndex) GetAwsBucketName() string {
	if m != nil {
		return m.AwsBucketName
	}
	return ""
}

func (m *MediaFileIndex) GetAwsFileName() string {
	if m != nil {
		return m.AwsFileName
	}
	return ""
}

func (m *MediaFileIndex) GetMetaDataOffset() uint32 {
	if m != nil {
		return m.MetaDataOffset
	}
	return 0
}

func (m *MediaFileIndex) GetMetaDataSize() uint32 {
	if m != nil {
		return m.MetaDataSize
	}
	return 0
}

func (m *MediaFileIndex) GetInsertTime() string {
	if m != nil {
		return m.InsertTime
	}
	return ""
}

func (m *MediaFileIndex) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *MediaFileIndex) GetCloudType() EM_CLOUD_TYPE {
	if m != nil {
		return m.CloudType
	}
	return EM_CLOUD_TYPE_EM_CLOUD_JD
}

//时间轴
type TimeLine struct {
	//开始时间
	StartTime uint64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//结束时间
	EndTime uint64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	//要播放的视频文件类型（1-设备本地存储的文件，2-云端存储的类型，3-本地和云端存储的类型）
	SourceType           SOURCE_TYPE `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3,enum=mapgoo.paas.live.SOURCE_TYPE" json:"source_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TimeLine) Reset()         { *m = TimeLine{} }
func (m *TimeLine) String() string { return proto.CompactTextString(m) }
func (*TimeLine) ProtoMessage()    {}
func (*TimeLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{6}
}

func (m *TimeLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeLine.Unmarshal(m, b)
}
func (m *TimeLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeLine.Marshal(b, m, deterministic)
}
func (m *TimeLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeLine.Merge(m, src)
}
func (m *TimeLine) XXX_Size() int {
	return xxx_messageInfo_TimeLine.Size(m)
}
func (m *TimeLine) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeLine.DiscardUnknown(m)
}

var xxx_messageInfo_TimeLine proto.InternalMessageInfo

func (m *TimeLine) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TimeLine) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *TimeLine) GetSourceType() SOURCE_TYPE {
	if m != nil {
		return m.SourceType
	}
	return SOURCE_TYPE_DEFAULT
}

//调阅时间轴查询
type MediaTimeLine struct {
	//设备id
	ObjectId uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//设备imei
	Imei string `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	//摄像头通道号
	Channel uint32 `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
	//表示当前系统时间，播放器可以基于这个字段对时
	Current uint32 `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	//云存储类型
	CloudType uint32 `protobuf:"varint,5,opt,name=cloudType,proto3" json:"cloudType,omitempty"`
	//时间轴列表
	TimeList             []*TimeLine `protobuf:"bytes,6,rep,name=time_list,json=timeList,proto3" json:"time_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MediaTimeLine) Reset()         { *m = MediaTimeLine{} }
func (m *MediaTimeLine) String() string { return proto.CompactTextString(m) }
func (*MediaTimeLine) ProtoMessage()    {}
func (*MediaTimeLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{7}
}

func (m *MediaTimeLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaTimeLine.Unmarshal(m, b)
}
func (m *MediaTimeLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaTimeLine.Marshal(b, m, deterministic)
}
func (m *MediaTimeLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaTimeLine.Merge(m, src)
}
func (m *MediaTimeLine) XXX_Size() int {
	return xxx_messageInfo_MediaTimeLine.Size(m)
}
func (m *MediaTimeLine) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaTimeLine.DiscardUnknown(m)
}

var xxx_messageInfo_MediaTimeLine proto.InternalMessageInfo

func (m *MediaTimeLine) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *MediaTimeLine) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *MediaTimeLine) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *MediaTimeLine) GetCurrent() uint32 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *MediaTimeLine) GetCloudType() uint32 {
	if m != nil {
		return m.CloudType
	}
	return 0
}

func (m *MediaTimeLine) GetTimeList() []*TimeLine {
	if m != nil {
		return m.TimeList
	}
	return nil
}

//图片抓拍
type MediaInfo struct {
	//类型： 1 - 图片 2 - 视频
	Type MEDIA_TYPE `protobuf:"varint,1,opt,name=type,proto3,enum=mapgoo.paas.live.MEDIA_TYPE" json:"type,omitempty"`
	//url
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	//定位时间
	GpsTime uint32 `protobuf:"varint,3,opt,name=gps_time,json=gpsTime,proto3" json:"gps_time,omitempty"`
	//接收时间
	RecvTime uint32 `protobuf:"varint,4,opt,name=recv_time,json=recvTime,proto3" json:"recv_time,omitempty"`
	//经度
	Lng uint32 `protobuf:"varint,5,opt,name=lng,proto3" json:"lng,omitempty"`
	//纬度
	Lat uint32 `protobuf:"varint,6,opt,name=lat,proto3" json:"lat,omitempty"`
	//里程
	Mileage uint32 `protobuf:"varint,7,opt,name=mileage,proto3" json:"mileage,omitempty"`
	//速度
	Speed uint32 `protobuf:"varint,8,opt,name=speed,proto3" json:"speed,omitempty"`
	//方向
	Direction uint32 `protobuf:"varint,9,opt,name=direction,proto3" json:"direction,omitempty"`
	//缩略图url
	ThumbnailUrl         string   `protobuf:"bytes,10,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaInfo) Reset()         { *m = MediaInfo{} }
func (m *MediaInfo) String() string { return proto.CompactTextString(m) }
func (*MediaInfo) ProtoMessage()    {}
func (*MediaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{8}
}

func (m *MediaInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaInfo.Unmarshal(m, b)
}
func (m *MediaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaInfo.Marshal(b, m, deterministic)
}
func (m *MediaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaInfo.Merge(m, src)
}
func (m *MediaInfo) XXX_Size() int {
	return xxx_messageInfo_MediaInfo.Size(m)
}
func (m *MediaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MediaInfo proto.InternalMessageInfo

func (m *MediaInfo) GetType() MEDIA_TYPE {
	if m != nil {
		return m.Type
	}
	return MEDIA_TYPE_MEDIA_TYPE_DEFAULT
}

func (m *MediaInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MediaInfo) GetGpsTime() uint32 {
	if m != nil {
		return m.GpsTime
	}
	return 0
}

func (m *MediaInfo) GetRecvTime() uint32 {
	if m != nil {
		return m.RecvTime
	}
	return 0
}

func (m *MediaInfo) GetLng() uint32 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *MediaInfo) GetLat() uint32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *MediaInfo) GetMileage() uint32 {
	if m != nil {
		return m.Mileage
	}
	return 0
}

func (m *MediaInfo) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *MediaInfo) GetDirection() uint32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *MediaInfo) GetThumbnailUrl() string {
	if m != nil {
		return m.ThumbnailUrl
	}
	return ""
}

//直播url信息
type LiveUrlInfo struct {
	//摄像头,
	CameraType CAMERA_TYPE `protobuf:"varint,1,opt,name=camera_type,json=cameraType,proto3,enum=mapgoo.paas.live.CAMERA_TYPE" json:"camera_type,omitempty"`
	//url
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveUrlInfo) Reset()         { *m = LiveUrlInfo{} }
func (m *LiveUrlInfo) String() string { return proto.CompactTextString(m) }
func (*LiveUrlInfo) ProtoMessage()    {}
func (*LiveUrlInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{9}
}

func (m *LiveUrlInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveUrlInfo.Unmarshal(m, b)
}
func (m *LiveUrlInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveUrlInfo.Marshal(b, m, deterministic)
}
func (m *LiveUrlInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveUrlInfo.Merge(m, src)
}
func (m *LiveUrlInfo) XXX_Size() int {
	return xxx_messageInfo_LiveUrlInfo.Size(m)
}
func (m *LiveUrlInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveUrlInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LiveUrlInfo proto.InternalMessageInfo

func (m *LiveUrlInfo) GetCameraType() CAMERA_TYPE {
	if m != nil {
		return m.CameraType
	}
	return CAMERA_TYPE_CAMERA_TYPE_DEFAULT
}

func (m *LiveUrlInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

//云文件列表
type MediaFileInfo struct {
	//文件编号
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//设备使用aws上传视频到京东的保存目录
	AwsBucketName string `protobuf:"bytes,2,opt,name=aws_bucket_name,json=awsBucketName,proto3" json:"aws_bucket_name,omitempty"`
	//京东保存的文件名
	AwsFileName string `protobuf:"bytes,3,opt,name=aws_file_name,json=awsFileName,proto3" json:"aws_file_name,omitempty"`
	//视频moov在文件中保存的偏移，包含metaData四个字节长度
	MoovOffset uint32 `protobuf:"varint,4,opt,name=moov_offset,json=moovOffset,proto3" json:"moov_offset,omitempty"`
	//视频moov在文件中的长度
	MoovSize uint32 `protobuf:"varint,5,opt,name=moov_size,json=moovSize,proto3" json:"moov_size,omitempty"`
	//视频录制的起始时间
	BeginTime string `protobuf:"bytes,6,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	//视频录制的结束时间
	EndTime              string   `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaFileInfo) Reset()         { *m = MediaFileInfo{} }
func (m *MediaFileInfo) String() string { return proto.CompactTextString(m) }
func (*MediaFileInfo) ProtoMessage()    {}
func (*MediaFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{10}
}

func (m *MediaFileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaFileInfo.Unmarshal(m, b)
}
func (m *MediaFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaFileInfo.Marshal(b, m, deterministic)
}
func (m *MediaFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaFileInfo.Merge(m, src)
}
func (m *MediaFileInfo) XXX_Size() int {
	return xxx_messageInfo_MediaFileInfo.Size(m)
}
func (m *MediaFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MediaFileInfo proto.InternalMessageInfo

func (m *MediaFileInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MediaFileInfo) GetAwsBucketName() string {
	if m != nil {
		return m.AwsBucketName
	}
	return ""
}

func (m *MediaFileInfo) GetAwsFileName() string {
	if m != nil {
		return m.AwsFileName
	}
	return ""
}

func (m *MediaFileInfo) GetMoovOffset() uint32 {
	if m != nil {
		return m.MoovOffset
	}
	return 0
}

func (m *MediaFileInfo) GetMoovSize() uint32 {
	if m != nil {
		return m.MoovSize
	}
	return 0
}

func (m *MediaFileInfo) GetBeginTime() string {
	if m != nil {
		return m.BeginTime
	}
	return ""
}

func (m *MediaFileInfo) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

//用户配置
type ApkSigConfig struct {
	//直播ip
	StreamIp             string   `protobuf:"bytes,1,opt,name=stream_ip,json=streamIp,proto3" json:"stream_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApkSigConfig) Reset()         { *m = ApkSigConfig{} }
func (m *ApkSigConfig) String() string { return proto.CompactTextString(m) }
func (*ApkSigConfig) ProtoMessage()    {}
func (*ApkSigConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{11}
}

func (m *ApkSigConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApkSigConfig.Unmarshal(m, b)
}
func (m *ApkSigConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApkSigConfig.Marshal(b, m, deterministic)
}
func (m *ApkSigConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApkSigConfig.Merge(m, src)
}
func (m *ApkSigConfig) XXX_Size() int {
	return xxx_messageInfo_ApkSigConfig.Size(m)
}
func (m *ApkSigConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ApkSigConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ApkSigConfig proto.InternalMessageInfo

func (m *ApkSigConfig) GetStreamIp() string {
	if m != nil {
		return m.StreamIp
	}
	return ""
}

//配置参数
type MDTParamInfo struct {
	//设备id
	ObjectId uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//设备imei
	Imei string `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	//配置类型
	ParamType string `protobuf:"bytes,3,opt,name=param_type,json=paramType,proto3" json:"param_type,omitempty"`
	//配置值
	ParamValue           string   `protobuf:"bytes,4,opt,name=param_value,json=paramValue,proto3" json:"param_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MDTParamInfo) Reset()         { *m = MDTParamInfo{} }
func (m *MDTParamInfo) String() string { return proto.CompactTextString(m) }
func (*MDTParamInfo) ProtoMessage()    {}
func (*MDTParamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{12}
}

func (m *MDTParamInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDTParamInfo.Unmarshal(m, b)
}
func (m *MDTParamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDTParamInfo.Marshal(b, m, deterministic)
}
func (m *MDTParamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDTParamInfo.Merge(m, src)
}
func (m *MDTParamInfo) XXX_Size() int {
	return xxx_messageInfo_MDTParamInfo.Size(m)
}
func (m *MDTParamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MDTParamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MDTParamInfo proto.InternalMessageInfo

func (m *MDTParamInfo) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *MDTParamInfo) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *MDTParamInfo) GetParamType() string {
	if m != nil {
		return m.ParamType
	}
	return ""
}

func (m *MDTParamInfo) GetParamValue() string {
	if m != nil {
		return m.ParamValue
	}
	return ""
}

//摄像头
type CameraInfo struct {
	//摄像头类型
	CameraType CAMERA_TYPE `protobuf:"varint,1,opt,name=camera_type,json=cameraType,proto3,enum=mapgoo.paas.live.CAMERA_TYPE" json:"camera_type,omitempty"`
	//摄像头状态
	CameraState          CAMERA_STATE `protobuf:"varint,2,opt,name=camera_state,json=cameraState,proto3,enum=mapgoo.paas.live.CAMERA_STATE" json:"camera_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CameraInfo) Reset()         { *m = CameraInfo{} }
func (m *CameraInfo) String() string { return proto.CompactTextString(m) }
func (*CameraInfo) ProtoMessage()    {}
func (*CameraInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{13}
}

func (m *CameraInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraInfo.Unmarshal(m, b)
}
func (m *CameraInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraInfo.Marshal(b, m, deterministic)
}
func (m *CameraInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraInfo.Merge(m, src)
}
func (m *CameraInfo) XXX_Size() int {
	return xxx_messageInfo_CameraInfo.Size(m)
}
func (m *CameraInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CameraInfo proto.InternalMessageInfo

func (m *CameraInfo) GetCameraType() CAMERA_TYPE {
	if m != nil {
		return m.CameraType
	}
	return CAMERA_TYPE_CAMERA_TYPE_DEFAULT
}

func (m *CameraInfo) GetCameraState() CAMERA_STATE {
	if m != nil {
		return m.CameraState
	}
	return CAMERA_STATE_CAMERA_DEFAULT
}

//水印
type MdeiaWatermak struct {
	//视频id
	VedioId uint64 `protobuf:"varint,1,opt,name=vedio_id,json=vedioId,proto3" json:"vedio_id,omitempty"`
	//任务id
	TaskId uint64 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	//文件名
	OutFileName          string   `protobuf:"bytes,3,opt,name=out_file_name,json=outFileName,proto3" json:"out_file_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MdeiaWatermak) Reset()         { *m = MdeiaWatermak{} }
func (m *MdeiaWatermak) String() string { return proto.CompactTextString(m) }
func (*MdeiaWatermak) ProtoMessage()    {}
func (*MdeiaWatermak) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{14}
}

func (m *MdeiaWatermak) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MdeiaWatermak.Unmarshal(m, b)
}
func (m *MdeiaWatermak) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MdeiaWatermak.Marshal(b, m, deterministic)
}
func (m *MdeiaWatermak) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MdeiaWatermak.Merge(m, src)
}
func (m *MdeiaWatermak) XXX_Size() int {
	return xxx_messageInfo_MdeiaWatermak.Size(m)
}
func (m *MdeiaWatermak) XXX_DiscardUnknown() {
	xxx_messageInfo_MdeiaWatermak.DiscardUnknown(m)
}

var xxx_messageInfo_MdeiaWatermak proto.InternalMessageInfo

func (m *MdeiaWatermak) GetVedioId() uint64 {
	if m != nil {
		return m.VedioId
	}
	return 0
}

func (m *MdeiaWatermak) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *MdeiaWatermak) GetOutFileName() string {
	if m != nil {
		return m.OutFileName
	}
	return ""
}

//视频分享到广场
type SqureInfo struct {
	//视频id
	VedioId uint64 `protobuf:"varint,1,opt,name=vedio_id,json=vedioId,proto3" json:"vedio_id,omitempty"`
	//用户id
	UserId uint32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	//用户名称
	UserName string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	//
	UserAvatar string `protobuf:"bytes,4,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"`
	//视频url
	VedioUrl string `protobuf:"bytes,5,opt,name=vedio_url,json=vedioUrl,proto3" json:"vedio_url,omitempty"`
	//图片url
	ThumUrl string `protobuf:"bytes,6,opt,name=thum_url,json=thumUrl,proto3" json:"thum_url,omitempty"`
	//
	ShootTime string `protobuf:"bytes,7,opt,name=shoot_time,json=shootTime,proto3" json:"shoot_time,omitempty"`
	//经度
	Lng int32 `protobuf:"varint,8,opt,name=lng,proto3" json:"lng,omitempty"`
	//纬度
	Lat int32 `protobuf:"varint,9,opt,name=lat,proto3" json:"lat,omitempty"`
	//速度
	Speed uint32 `protobuf:"varint,10,opt,name=speed,proto3" json:"speed,omitempty"`
	//方向
	Direct uint32 `protobuf:"varint,11,opt,name=direct,proto3" json:"direct,omitempty"`
	//定位时间
	GpsTime string `protobuf:"bytes,12,opt,name=gps_time,json=gpsTime,proto3" json:"gps_time,omitempty"`
	//视频描述
	VedioDesc string `protobuf:"bytes,13,opt,name=vedio_desc,json=vedioDesc,proto3" json:"vedio_desc,omitempty"`
	//
	CommentCount uint32 `protobuf:"varint,14,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	//
	LovedCount uint32 `protobuf:"varint,15,opt,name=loved_count,json=lovedCount,proto3" json:"loved_count,omitempty"`
	//
	ViewCount uint32 `protobuf:"varint,16,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	//
	ReportCount uint32 `protobuf:"varint,17,opt,name=report_count,json=reportCount,proto3" json:"report_count,omitempty"`
	//
	VideoFlag uint32 `protobuf:"varint,18,opt,name=video_flag,json=videoFlag,proto3" json:"video_flag,omitempty"`
	//市
	City string `protobuf:"bytes,19,opt,name=city,proto3" json:"city,omitempty"`
	//状态
	State                uint32   `protobuf:"varint,20,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SqureInfo) Reset()         { *m = SqureInfo{} }
func (m *SqureInfo) String() string { return proto.CompactTextString(m) }
func (*SqureInfo) ProtoMessage()    {}
func (*SqureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{15}
}

func (m *SqureInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SqureInfo.Unmarshal(m, b)
}
func (m *SqureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SqureInfo.Marshal(b, m, deterministic)
}
func (m *SqureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SqureInfo.Merge(m, src)
}
func (m *SqureInfo) XXX_Size() int {
	return xxx_messageInfo_SqureInfo.Size(m)
}
func (m *SqureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SqureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SqureInfo proto.InternalMessageInfo

func (m *SqureInfo) GetVedioId() uint64 {
	if m != nil {
		return m.VedioId
	}
	return 0
}

func (m *SqureInfo) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SqureInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *SqureInfo) GetUserAvatar() string {
	if m != nil {
		return m.UserAvatar
	}
	return ""
}

func (m *SqureInfo) GetVedioUrl() string {
	if m != nil {
		return m.VedioUrl
	}
	return ""
}

func (m *SqureInfo) GetThumUrl() string {
	if m != nil {
		return m.ThumUrl
	}
	return ""
}

func (m *SqureInfo) GetShootTime() string {
	if m != nil {
		return m.ShootTime
	}
	return ""
}

func (m *SqureInfo) GetLng() int32 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *SqureInfo) GetLat() int32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *SqureInfo) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *SqureInfo) GetDirect() uint32 {
	if m != nil {
		return m.Direct
	}
	return 0
}

func (m *SqureInfo) GetGpsTime() string {
	if m != nil {
		return m.GpsTime
	}
	return ""
}

func (m *SqureInfo) GetVedioDesc() string {
	if m != nil {
		return m.VedioDesc
	}
	return ""
}

func (m *SqureInfo) GetCommentCount() uint32 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *SqureInfo) GetLovedCount() uint32 {
	if m != nil {
		return m.LovedCount
	}
	return 0
}

func (m *SqureInfo) GetViewCount() uint32 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *SqureInfo) GetReportCount() uint32 {
	if m != nil {
		return m.ReportCount
	}
	return 0
}

func (m *SqureInfo) GetVideoFlag() uint32 {
	if m != nil {
		return m.VideoFlag
	}
	return 0
}

func (m *SqureInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *SqureInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

//随手拍
type PeccancyReport struct {
	//序列号
	RecId uint64 `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3" json:"rec_id,omitempty"`
	//用户id
	UserId uint32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	//纬度
	Lat int32 `protobuf:"varint,3,opt,name=lat,proto3" json:"lat,omitempty"`
	//经度
	Lng int32 `protobuf:"varint,4,opt,name=lng,proto3" json:"lng,omitempty"`
	//市
	City string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	//描述
	Desc string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	//图片
	Image string `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	//视频
	Video string `protobuf:"bytes,8,opt,name=video,proto3" json:"video,omitempty"`
	//随手拍类型
	PeccancyType uint32 `protobuf:"varint,9,opt,name=peccancy_type,json=peccancyType,proto3" json:"peccancy_type,omitempty"`
	//随手拍时间
	PeccancyTime string `protobuf:"bytes,10,opt,name=peccancy_time,json=peccancyTime,proto3" json:"peccancy_time,omitempty"`
	//随手拍地址
	PeccancyAddress string `protobuf:"bytes,11,opt,name=peccancy_address,json=peccancyAddress,proto3" json:"peccancy_address,omitempty"`
	//状态
	Status uint32 `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	//
	Reason string `protobuf:"bytes,13,opt,name=reason,proto3" json:"reason,omitempty"`
	//
	PlateNumber uint32 `protobuf:"varint,14,opt,name=plate_number,json=plateNumber,proto3" json:"plate_number,omitempty"`
	//
	PlateNumberType uint32 `protobuf:"varint,16,opt,name=plate_number_type,json=plateNumberType,proto3" json:"plate_number_type,omitempty"`
	//用户名称
	UserName string `protobuf:"bytes,17,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	//卡id
	Idcard string `protobuf:"bytes,18,opt,name=idcard,proto3" json:"idcard,omitempty"`
	//手机号码
	Mobile string `protobuf:"bytes,19,opt,name=mobile,proto3" json:"mobile,omitempty"`
	//备注
	Remark string `protobuf:"bytes,20,opt,name=remark,proto3" json:"remark,omitempty"`
	//回执码
	ReportCode uint32 `protobuf:"varint,21,opt,name=report_code,json=reportCode,proto3" json:"report_code,omitempty"`
	//验证码
	VerifyCode string `protobuf:"bytes,22,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	//管理员
	Admin string `protobuf:"bytes,23,opt,name=admin,proto3" json:"admin,omitempty"`
	//设备imei
	Imei string `protobuf:"bytes,24,opt,name=imei,proto3" json:"imei,omitempty"`
	//序号
	Seq                  uint64   `protobuf:"varint,25,opt,name=seq,proto3" json:"seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeccancyReport) Reset()         { *m = PeccancyReport{} }
func (m *PeccancyReport) String() string { return proto.CompactTextString(m) }
func (*PeccancyReport) ProtoMessage()    {}
func (*PeccancyReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_125211518474b45b, []int{16}
}

func (m *PeccancyReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeccancyReport.Unmarshal(m, b)
}
func (m *PeccancyReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeccancyReport.Marshal(b, m, deterministic)
}
func (m *PeccancyReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeccancyReport.Merge(m, src)
}
func (m *PeccancyReport) XXX_Size() int {
	return xxx_messageInfo_PeccancyReport.Size(m)
}
func (m *PeccancyReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PeccancyReport.DiscardUnknown(m)
}

var xxx_messageInfo_PeccancyReport proto.InternalMessageInfo

func (m *PeccancyReport) GetRecId() uint64 {
	if m != nil {
		return m.RecId
	}
	return 0
}

func (m *PeccancyReport) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PeccancyReport) GetLat() int32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *PeccancyReport) GetLng() int32 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *PeccancyReport) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *PeccancyReport) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *PeccancyReport) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *PeccancyReport) GetVideo() string {
	if m != nil {
		return m.Video
	}
	return ""
}

func (m *PeccancyReport) GetPeccancyType() uint32 {
	if m != nil {
		return m.PeccancyType
	}
	return 0
}

func (m *PeccancyReport) GetPeccancyTime() string {
	if m != nil {
		return m.PeccancyTime
	}
	return ""
}

func (m *PeccancyReport) GetPeccancyAddress() string {
	if m != nil {
		return m.PeccancyAddress
	}
	return ""
}

func (m *PeccancyReport) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PeccancyReport) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PeccancyReport) GetPlateNumber() uint32 {
	if m != nil {
		return m.PlateNumber
	}
	return 0
}

func (m *PeccancyReport) GetPlateNumberType() uint32 {
	if m != nil {
		return m.PlateNumberType
	}
	return 0
}

func (m *PeccancyReport) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *PeccancyReport) GetIdcard() string {
	if m != nil {
		return m.Idcard
	}
	return ""
}

func (m *PeccancyReport) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *PeccancyReport) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *PeccancyReport) GetReportCode() uint32 {
	if m != nil {
		return m.ReportCode
	}
	return 0
}

func (m *PeccancyReport) GetVerifyCode() string {
	if m != nil {
		return m.VerifyCode
	}
	return ""
}

func (m *PeccancyReport) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *PeccancyReport) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *PeccancyReport) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func init() {
	proto.RegisterEnum("mapgoo.paas.live.TYPE_LIVE", TYPE_LIVE_name, TYPE_LIVE_value)
	proto.RegisterEnum("mapgoo.paas.live.EM_CLOUD_TYPE", EM_CLOUD_TYPE_name, EM_CLOUD_TYPE_value)
	proto.RegisterEnum("mapgoo.paas.live.SOURCE_TYPE", SOURCE_TYPE_name, SOURCE_TYPE_value)
	proto.RegisterEnum("mapgoo.paas.live.CAMERA_STATE", CAMERA_STATE_name, CAMERA_STATE_value)
	proto.RegisterEnum("mapgoo.paas.live.CAMERA_TYPE", CAMERA_TYPE_name, CAMERA_TYPE_value)
	proto.RegisterEnum("mapgoo.paas.live.MEDIA_TYPE", MEDIA_TYPE_name, MEDIA_TYPE_value)
	proto.RegisterType((*LiveParam)(nil), "mapgoo.paas.live.LiveParam")
	proto.RegisterType((*LiveInfo)(nil), "mapgoo.paas.live.LiveInfo")
	proto.RegisterType((*DrivingBehavior)(nil), "mapgoo.paas.live.DrivingBehavior")
	proto.RegisterType((*DriveEventLable)(nil), "mapgoo.paas.live.DriveEventLable")
	proto.RegisterType((*DeviceEvent)(nil), "mapgoo.paas.live.DeviceEvent")
	proto.RegisterType((*MediaFileIndex)(nil), "mapgoo.paas.live.MediaFileIndex")
	proto.RegisterType((*TimeLine)(nil), "mapgoo.paas.live.TimeLine")
	proto.RegisterType((*MediaTimeLine)(nil), "mapgoo.paas.live.MediaTimeLine")
	proto.RegisterType((*MediaInfo)(nil), "mapgoo.paas.live.MediaInfo")
	proto.RegisterType((*LiveUrlInfo)(nil), "mapgoo.paas.live.LiveUrlInfo")
	proto.RegisterType((*MediaFileInfo)(nil), "mapgoo.paas.live.MediaFileInfo")
	proto.RegisterType((*ApkSigConfig)(nil), "mapgoo.paas.live.ApkSigConfig")
	proto.RegisterType((*MDTParamInfo)(nil), "mapgoo.paas.live.MDTParamInfo")
	proto.RegisterType((*CameraInfo)(nil), "mapgoo.paas.live.CameraInfo")
	proto.RegisterType((*MdeiaWatermak)(nil), "mapgoo.paas.live.MdeiaWatermak")
	proto.RegisterType((*SqureInfo)(nil), "mapgoo.paas.live.SqureInfo")
	proto.RegisterType((*PeccancyReport)(nil), "mapgoo.paas.live.PeccancyReport")
}

func init() { proto.RegisterFile("mapgoo.paas.live.proto", fileDescriptor_125211518474b45b) }

var fileDescriptor_125211518474b45b = []byte{
	// 2509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x4b, 0x73, 0xdb, 0xc8,
	0x11, 0x36, 0xdf, 0x44, 0xf3, 0x21, 0x18, 0x96, 0x64, 0xda, 0xb2, 0x2c, 0x2d, 0xd7, 0x95, 0x52,
	0x94, 0x2a, 0xd5, 0xc6, 0x7b, 0x48, 0x4e, 0xae, 0x92, 0x45, 0xaa, 0xc2, 0x84, 0x7a, 0x14, 0x44,
	0x39, 0x8f, 0x0b, 0x6a, 0x48, 0x8c, 0x28, 0x44, 0x78, 0x2d, 0x00, 0x52, 0xd1, 0x5e, 0x72, 0xc9,
	0xdd, 0xff, 0x20, 0xf9, 0x0d, 0x39, 0xe7, 0x94, 0x73, 0x7e, 0x46, 0x6e, 0x39, 0xe6, 0x0f, 0x6c,
	0xaa, 0xbb, 0x07, 0x0f, 0x4a, 0xb2, 0x93, 0x6c, 0xed, 0x49, 0xe8, 0xaf, 0x7b, 0x7a, 0xfa, 0x35,
	0x3d, 0x3d, 0x14, 0x6c, 0x7a, 0x22, 0x9c, 0x07, 0xc1, 0x41, 0x28, 0x44, 0x7c, 0xe0, 0x3a, 0x4b,
	0x79, 0x10, 0x46, 0x41, 0x12, 0x18, 0xfa, 0x7d, 0xfc, 0xe5, 0x8a, 0xe4, 0x54, 0xc4, 0x4a, 0xb2,
	0xff, 0x5d, 0x09, 0xb4, 0xb1, 0xb3, 0x94, 0xe7, 0x22, 0x12, 0x9e, 0xf1, 0x33, 0xd0, 0x6c, 0xb9,
	0x74, 0x66, 0xd2, 0x72, 0xec, 0x5e, 0x69, 0xb7, 0xb4, 0xd7, 0x7a, 0xfb, 0xf2, 0xe0, 0xc1, 0xca,
	0x01, 0x89, 0x8c, 0x6c, 0xb3, 0x69, 0xab, 0x2f, 0xe3, 0xe7, 0xa0, 0xe1, 0x36, 0x56, 0x72, 0x17,
	0xca, 0x5e, 0x79, 0xb7, 0xb4, 0xd7, 0x7d, 0xbb, 0x75, 0xf0, 0xc0, 0xb8, 0xc9, 0x6f, 0xcf, 0x87,
	0xd6, 0x78, 0xf4, 0x61, 0x68, 0x36, 0x91, 0x9e, 0xdc, 0x85, 0xd2, 0xe8, 0x41, 0x63, 0x76, 0x2d,
	0x7c, 0x5f, 0xba, 0xbd, 0xca, 0x6e, 0x69, 0xaf, 0x63, 0xa6, 0xa4, 0xf1, 0x1c, 0x1a, 0x8b, 0x58,
	0x46, 0x68, 0x4a, 0x95, 0x38, 0x75, 0x24, 0x47, 0xb6, 0xb1, 0x01, 0xf5, 0x38, 0x5e, 0x22, 0x5e,
	0xdb, 0x2d, 0xed, 0x69, 0x66, 0x2d, 0x8e, 0x97, 0x23, 0xdb, 0xd8, 0x81, 0x56, 0x18, 0x49, 0x2b,
	0xd5, 0x56, 0xa7, 0x35, 0x10, 0x46, 0xf2, 0x48, 0x29, 0x5c, 0x87, 0x5a, 0xe2, 0x78, 0x32, 0xee,
	0x35, 0x76, 0x4b, 0x7b, 0x55, 0x93, 0x89, 0xfe, 0xdf, 0xca, 0xd0, 0xc4, 0x08, 0x8c, 0xfc, 0xab,
	0xc0, 0xd8, 0x02, 0x2d, 0x98, 0xfe, 0x5e, 0xce, 0x92, 0x34, 0x00, 0x1d, 0xb3, 0xc9, 0xc0, 0xc8,
	0x36, 0x0c, 0xa8, 0x3a, 0x9e, 0x74, 0xc8, 0x3f, 0xcd, 0xa4, 0x6f, 0xe3, 0x05, 0x90, 0x2b, 0xd6,
	0x22, 0x62, 0xfb, 0x35, 0xb3, 0x81, 0xf4, 0x65, 0xe4, 0x16, 0xcc, 0xac, 0x16, 0xcd, 0x44, 0x2b,
	0x82, 0x1b, 0xe9, 0xa7, 0xc6, 0x13, 0x81, 0xc6, 0xab, 0xc8, 0x53, 0x08, 0x95, 0xf1, 0x0c, 0x51,
	0x9c, 0x36, 0xa1, 0x1e, 0x27, 0x22, 0x59, 0xb0, 0xf5, 0x1d, 0x53, 0x51, 0xb8, 0x70, 0x11, 0xda,
	0x22, 0x91, 0x16, 0xba, 0xd3, 0x6b, 0x92, 0x52, 0x60, 0x68, 0xe2, 0x78, 0x12, 0x05, 0xe2, 0x78,
	0xe9, 0xd8, 0xd6, 0x2c, 0x58, 0xf8, 0x49, 0x4f, 0x63, 0xcd, 0x04, 0x1d, 0x21, 0x62, 0xbc, 0x86,
	0x96, 0x67, 0x27, 0xb4, 0x2f, 0x1a, 0x0b, 0x24, 0xa0, 0x79, 0x76, 0x82, 0xfb, 0x8e, 0x6c, 0x8c,
	0xc9, 0xad, 0x70, 0x12, 0xd6, 0xdf, 0xa2, 0xd0, 0x35, 0x11, 0x40, 0xed, 0xfd, 0x8f, 0x15, 0x58,
	0x1b, 0x44, 0xce, 0xd2, 0xf1, 0xe7, 0xef, 0xe5, 0xb5, 0x58, 0x3a, 0x41, 0xf4, 0xf9, 0x20, 0xee,
	0x81, 0x6e, 0x47, 0x18, 0x31, 0xb9, 0x94, 0x7e, 0x92, 0x17, 0x4c, 0xc7, 0xec, 0x12, 0x3e, 0x44,
	0x98, 0x3c, 0xde, 0x02, 0x2d, 0x89, 0xc4, 0x52, 0xba, 0xa8, 0x86, 0x6b, 0xa3, 0xc9, 0xc0, 0xc8,
	0x36, 0xbe, 0x86, 0xcd, 0xa2, 0x9a, 0x38, 0x11, 0x91, 0xb2, 0x90, 0x83, 0xfd, 0x2c, 0x57, 0x76,
	0x81, 0x3c, 0x0a, 0xc5, 0x4f, 0x61, 0x63, 0x75, 0x51, 0x10, 0xf2, 0x1a, 0x4e, 0x85, 0x51, 0x5c,
	0x13, 0x84, 0x69, 0xf4, 0x66, 0x91, 0xcc, 0xc2, 0x5b, 0x27, 0xf7, 0x81, 0xa1, 0x54, 0xa0, 0x18,
	0x7f, 0x2e, 0xad, 0x62, 0xfc, 0xb7, 0x40, 0x63, 0xeb, 0x5c, 0x7f, 0x4e, 0xe9, 0xa9, 0x99, 0x4d,
	0x02, 0xc6, 0xfe, 0xbc, 0xc0, 0x14, 0x9c, 0x9a, 0x8c, 0x29, 0x12, 0xac, 0x2d, 0x32, 0x11, 0x17,
	0x02, 0xf1, 0x1a, 0x48, 0xe3, 0xba, 0x8c, 0x25, 0x12, 0x4a, 0x49, 0xca, 0x12, 0x49, 0x96, 0x11,
	0x76, 0x64, 0x2c, 0xa6, 0xae, 0x44, 0x71, 0x76, 0x39, 0x4b, 0x48, 0x83, 0x68, 0xce, 0x6e, 0x9e,
	0xac, 0xf2, 0xbd, 0x64, 0x6d, 0x03, 0xb8, 0xa8, 0x80, 0xd3, 0xc4, 0x39, 0xd0, 0x08, 0xa1, 0x0c,
	0xbd, 0x81, 0x2e, 0xb3, 0xe3, 0xc5, 0x94, 0x45, 0xf8, 0xa0, 0xb6, 0x09, 0xbd, 0x58, 0x4c, 0x49,
	0x2a, 0x53, 0x62, 0xcb, 0x78, 0xa6, 0x42, 0xcd, 0x4a, 0x06, 0x32, 0x9e, 0xa1, 0x6d, 0xf3, 0x30,
	0xce, 0xc3, 0xab, 0x99, 0x8d, 0x79, 0x18, 0x53, 0xe8, 0x5e, 0x40, 0x33, 0x9a, 0x2d, 0xf3, 0xc0,
	0x6a, 0x66, 0x23, 0x9a, 0x2d, 0xef, 0x45, 0x35, 0xf0, 0x57, 0xa3, 0x1a, 0xf8, 0x9f, 0x8f, 0xea,
	0x36, 0x40, 0xa1, 0x5a, 0x80, 0xcd, 0x89, 0xb3, 0x1a, 0xc9, 0x22, 0x1b, 0xf8, 0x2b, 0x91, 0x0d,
	0xfc, 0x95, 0xa0, 0xb7, 0x57, 0x82, 0xce, 0x3b, 0xa6, 0xd5, 0xd4, 0x21, 0x9d, 0x24, 0x4b, 0x67,
	0xe4, 0xef, 0x35, 0x68, 0x71, 0xcf, 0xa4, 0x94, 0x7c, 0xef, 0x6c, 0x6c, 0x15, 0xbb, 0x33, 0x37,
	0x9b, 0xbc, 0x03, 0x6f, 0x03, 0x14, 0x4e, 0x14, 0xe7, 0x41, 0x93, 0xd9, 0x61, 0xca, 0xd9, 0x79,
	0xbd, 0x2b, 0xb6, 0xf2, 0xda, 0x89, 0x2d, 0x37, 0x58, 0x4a, 0x5b, 0xf5, 0x9e, 0x86, 0x13, 0x8f,
	0x91, 0x34, 0x74, 0xa8, 0x60, 0x01, 0x36, 0xc8, 0x61, 0xfc, 0x24, 0x44, 0x24, 0x2a, 0xea, 0xf8,
	0x89, 0x3d, 0x2d, 0x0e, 0xa5, 0xb4, 0x55, 0x77, 0x61, 0x02, 0x5b, 0x96, 0xed, 0x44, 0x72, 0x96,
	0xa8, 0x9e, 0xa2, 0x28, 0x6c, 0xf9, 0xf3, 0x30, 0xce, 0xda, 0x49, 0xc7, 0x4c, 0x49, 0xa3, 0x0f,
	0x9d, 0x1b, 0x79, 0x67, 0x2d, 0x1d, 0x5b, 0x06, 0xd4, 0x52, 0xdb, 0xbb, 0x95, 0x3d, 0xcd, 0x6c,
	0xdd, 0xc8, 0xbb, 0x0f, 0x88, 0x61, 0x5b, 0xdd, 0x81, 0x16, 0xf3, 0xa7, 0x59, 0xb0, 0xab, 0x26,
	0x10, 0xf4, 0x3e, 0x51, 0x27, 0x92, 0x05, 0x24, 0x09, 0x74, 0x0b, 0x02, 0x43, 0x12, 0xd8, 0x06,
	0xa6, 0xac, 0xd8, 0xf9, 0x56, 0xf6, 0xd6, 0x38, 0x54, 0x84, 0x5c, 0x38, 0xdf, 0x52, 0x55, 0xe7,
	0x46, 0x84, 0x22, 0xb9, 0xee, 0xe9, 0x14, 0xae, 0x76, 0x6a, 0xc5, 0xb9, 0x48, 0xae, 0x53, 0x53,
	0x1d, 0x4f, 0xcc, 0xb9, 0xfb, 0x3f, 0xcd, 0x4c, 0x1d, 0x21, 0x86, 0xa6, 0x6e, 0x03, 0x30, 0x9f,
	0x0c, 0x31, 0x38, 0xe8, 0x84, 0x4c, 0x94, 0x1d, 0xcc, 0x26, 0x3b, 0x9e, 0xb1, 0x1d, 0x84, 0x90,
	0x1d, 0xbb, 0x80, 0x3b, 0x5a, 0xc9, 0xf5, 0xc2, 0xa3, 0x0d, 0xd6, 0xb9, 0xb5, 0xdf, 0xc8, 0xbb,
	0xc9, 0xf5, 0xc2, 0x43, 0xfd, 0x6f, 0xa0, 0x1b, 0x44, 0x4e, 0xd1, 0xd2, 0x0d, 0xb6, 0x34, 0x88,
	0x9c, 0xdc, 0xd2, 0x37, 0xd0, 0x8d, 0xa4, 0x5b, 0x94, 0xda, 0x24, 0x53, 0xdb, 0x91, 0x74, 0x73,
	0xa9, 0x6d, 0x80, 0x5b, 0x91, 0xc8, 0xc8, 0xf2, 0x44, 0x74, 0xd3, 0x7b, 0xce, 0xc6, 0x10, 0x72,
	0x22, 0xa2, 0x9b, 0xfe, 0xbf, 0xea, 0xd0, 0x3d, 0x91, 0xb6, 0x23, 0x8e, 0x1d, 0x57, 0x8e, 0x7c,
	0x5b, 0xfe, 0x81, 0x6a, 0x06, 0x3f, 0x0a, 0x65, 0x4c, 0xf4, 0x7f, 0x2b, 0xe3, 0xf4, 0x1a, 0xe5,
	0x76, 0xc2, 0xd7, 0x68, 0x61, 0x0a, 0xa8, 0xae, 0x4e, 0x01, 0x3f, 0x82, 0x35, 0x37, 0x98, 0x09,
	0xd7, 0xba, 0x72, 0x5c, 0x69, 0xf9, 0x22, 0xab, 0xde, 0x0e, 0xc1, 0x68, 0xce, 0xa9, 0xf0, 0xe4,
	0x3d, 0x39, 0x72, 0xb3, 0x7e, 0x4f, 0x8e, 0xfc, 0xdc, 0x81, 0x16, 0x49, 0x5c, 0x05, 0x91, 0x27,
	0x12, 0xd5, 0x56, 0x00, 0xa1, 0x63, 0x42, 0xd0, 0x76, 0x12, 0xa0, 0xa4, 0x34, 0xd9, 0x76, 0x04,
	0x28, 0x27, 0xaf, 0x01, 0x22, 0x19, 0x07, 0xee, 0x22, 0x71, 0x02, 0x3f, 0xbd, 0x4b, 0x73, 0x04,
	0x7d, 0x8b, 0x44, 0x22, 0x55, 0xc1, 0xd3, 0x77, 0xa6, 0x90, 0x0e, 0x66, 0x2b, 0x57, 0x48, 0xe7,
	0xf2, 0x0b, 0x68, 0xc7, 0x49, 0x10, 0x51, 0x91, 0x20, 0xbf, 0x4d, 0xfc, 0x96, 0xc2, 0xd2, 0x7b,
	0x70, 0xe6, 0x06, 0x0b, 0x9b, 0x8a, 0x40, 0xf5, 0x16, 0x02, 0xb0, 0x04, 0xf0, 0x92, 0xbc, 0x5e,
	0x78, 0x53, 0x62, 0x76, 0x99, 0x49, 0x80, 0xaa, 0xbf, 0xa9, 0x9c, 0x3b, 0x3e, 0xd7, 0xdf, 0x1a,
	0xd7, 0x1f, 0x21, 0xe9, 0xa1, 0x97, 0xbe, 0xcd, 0x4c, 0x2e, 0xf1, 0x86, 0xf4, 0x6d, 0x62, 0xed,
	0x81, 0x4e, 0x36, 0x7b, 0x81, 0xed, 0x5c, 0xdd, 0xb1, 0xc8, 0x53, 0x12, 0xe9, 0x22, 0x7e, 0x42,
	0x30, 0x49, 0xbe, 0x84, 0xa6, 0xbd, 0x88, 0x04, 0xc5, 0xc3, 0x60, 0xe7, 0x52, 0x1a, 0xb3, 0xba,
	0x94, 0x51, 0x8c, 0x2c, 0xae, 0xee, 0x94, 0xc4, 0x6c, 0x89, 0xdb, 0xd8, 0x9a, 0x2e, 0x66, 0x37,
	0x32, 0xe1, 0xac, 0x72, 0x79, 0x77, 0xc4, 0x6d, 0xfc, 0x9e, 0x50, 0xca, 0x6a, 0x1f, 0x10, 0x28,
	0xe4, 0x9e, 0x0b, 0xbc, 0x25, 0x6e, 0xe3, 0x2c, 0xf3, 0x7b, 0xa0, 0x7b, 0x32, 0x11, 0x96, 0x2d,
	0x12, 0x61, 0x05, 0x57, 0x57, 0xb1, 0x4c, 0x7a, 0x9b, 0x3c, 0x51, 0x20, 0x3e, 0x10, 0x89, 0x38,
	0x23, 0x14, 0x4f, 0x42, 0x2e, 0x49, 0xf9, 0xe5, 0x3a, 0x6f, 0xa7, 0x72, 0x94, 0xe3, 0x1d, 0x68,
	0x39, 0x7e, 0x2c, 0xd3, 0x1b, 0xa2, 0xc7, 0x15, 0xc2, 0xd0, 0x63, 0x57, 0xfe, 0x8b, 0x07, 0x23,
	0xd7, 0x3b, 0x00, 0xce, 0x18, 0xa5, 0xf4, 0x25, 0x8d, 0xc3, 0x3b, 0x0f, 0xc7, 0xe1, 0xe1, 0x89,
	0x75, 0x34, 0x3e, 0xbb, 0x1c, 0x58, 0x38, 0x17, 0x9b, 0x9c, 0x64, 0xcc, 0x78, 0xff, 0x4f, 0x25,
	0x68, 0xa2, 0xa2, 0xb1, 0xe3, 0xcb, 0x7b, 0xf7, 0x55, 0x89, 0xba, 0xd9, 0xea, 0x7d, 0x95, 0x25,
	0xb1, 0x4c, 0xcc, 0x2c, 0x89, 0xef, 0xa0, 0x15, 0x07, 0x8b, 0x68, 0x56, 0xb8, 0xbe, 0xbb, 0x6f,
	0xb7, 0x1f, 0xda, 0x71, 0x71, 0x76, 0x69, 0x1e, 0x0d, 0xd9, 0x0a, 0xe0, 0x15, 0x64, 0xc6, 0x3f,
	0x4a, 0xd0, 0xa1, 0x33, 0x9f, 0xd9, 0xf2, 0x7f, 0x8f, 0xc7, 0x9f, 0x9e, 0xee, 0x91, 0xb3, 0x88,
	0x22, 0xe9, 0x27, 0xd9, 0x89, 0x67, 0xd2, 0x78, 0x05, 0x79, 0x28, 0xe8, 0xac, 0x77, 0x0a, 0xb1,
	0xc1, 0x27, 0x0a, 0xfa, 0x6a, 0xb9, 0x4e, 0x9c, 0xf4, 0xea, 0xbb, 0x95, 0x07, 0x4f, 0x14, 0x7e,
	0x69, 0x28, 0x8b, 0xcd, 0x66, 0x42, 0x5f, 0x71, 0xd2, 0xff, 0x73, 0x19, 0x34, 0xf2, 0x86, 0x06,
	0xfd, 0xaf, 0xa0, 0x4a, 0x41, 0x29, 0x51, 0x50, 0x5e, 0x3d, 0xd4, 0x70, 0x32, 0x1c, 0x8c, 0x0e,
	0x39, 0x26, 0x24, 0x89, 0xb7, 0x1e, 0x9e, 0x31, 0xf6, 0x0e, 0x3f, 0x57, 0x26, 0x97, 0x4a, 0x76,
	0x91, 0xa5, 0xe3, 0x49, 0x24, 0xd3, 0xd1, 0x85, 0xfd, 0x6b, 0x22, 0x40, 0x4c, 0x75, 0xa3, 0xb2,
	0x6b, 0xc5, 0x1b, 0xb5, 0xae, 0x10, 0x41, 0x77, 0xa4, 0xe7, 0xb8, 0x52, 0xcc, 0xa5, 0x9a, 0xf7,
	0x53, 0x32, 0xbf, 0x6b, 0x9b, 0xc5, 0xbb, 0xf6, 0x15, 0x68, 0x7c, 0xbb, 0xe6, 0x7d, 0x29, 0x07,
	0x8c, 0x2f, 0xa1, 0x43, 0x4d, 0xc1, 0x17, 0x8e, 0x4b, 0x9d, 0x82, 0xc7, 0x9e, 0x76, 0x06, 0x5e,
	0x46, 0x6e, 0xdf, 0x82, 0xd6, 0x98, 0x9f, 0x2e, 0x14, 0xa1, 0x77, 0xd0, 0x9a, 0x09, 0x4f, 0x46,
	0xc2, 0x2a, 0x04, 0xea, 0x91, 0xea, 0x39, 0x3a, 0x3c, 0x19, 0x9a, 0x2a, 0x52, 0xc0, 0x2b, 0x26,
	0x8f, 0xc6, 0xab, 0xff, 0xcf, 0xb4, 0x9e, 0xf8, 0x0e, 0xb9, 0x0a, 0x8c, 0x2e, 0x94, 0xb3, 0x42,
	0x2a, 0x3b, 0xf6, 0x63, 0x6d, 0xa1, 0xfc, 0x3f, 0xb5, 0x85, 0xca, 0xc3, 0xb6, 0xb0, 0x03, 0x2d,
	0x2f, 0x08, 0x96, 0x69, 0x47, 0xe0, 0x24, 0x00, 0x42, 0xaa, 0x1b, 0x6c, 0x81, 0x46, 0x02, 0xd4,
	0x08, 0x38, 0x19, 0x4d, 0x04, 0xa8, 0x09, 0xac, 0xb6, 0xce, 0xfa, 0xe7, 0x5a, 0x67, 0x63, 0xa5,
	0x75, 0xf6, 0x7f, 0x02, 0xed, 0xc3, 0xf0, 0xe6, 0xc2, 0x99, 0x1f, 0x05, 0xfe, 0x95, 0xa3, 0x46,
	0xfc, 0x48, 0x0a, 0xcf, 0x72, 0x42, 0x72, 0x95, 0x46, 0x43, 0x04, 0x46, 0x61, 0xff, 0x8f, 0xd0,
	0x3e, 0x19, 0x4c, 0xe8, 0xf1, 0xfd, 0xfd, 0xde, 0x9f, 0xdb, 0x00, 0x21, 0xae, 0xce, 0x8f, 0xb8,
	0x66, 0x6a, 0x84, 0x50, 0x12, 0xf0, 0x4d, 0x4c, 0xec, 0xa5, 0x70, 0x17, 0xe9, 0xdb, 0x88, 0x57,
	0x7c, 0x40, 0xa4, 0xff, 0xb1, 0x04, 0x70, 0x44, 0x49, 0xfb, 0x41, 0x92, 0x7e, 0x08, 0x6d, 0xb5,
	0x1e, 0x9f, 0xa7, 0xe9, 0x4f, 0x01, 0xaf, 0x3f, 0xa9, 0xe0, 0x62, 0x72, 0x38, 0x19, 0x9a, 0x6a,
	0xcf, 0x0b, 0x5c, 0xd2, 0x9f, 0x43, 0xe7, 0xc4, 0x96, 0x8e, 0xf8, 0x35, 0xce, 0x1e, 0x9e, 0xb8,
	0xc1, 0x58, 0x2f, 0xa5, 0xed, 0x04, 0x69, 0x48, 0xaa, 0x78, 0x8d, 0xd8, 0x4e, 0x30, 0xb2, 0x8d,
	0xe7, 0xd0, 0x48, 0x44, 0x7c, 0x93, 0x4e, 0x19, 0x55, 0xb3, 0x8e, 0xe4, 0xc8, 0xc6, 0x02, 0x09,
	0x16, 0xc9, 0xc3, 0x02, 0x09, 0x16, 0x49, 0x5a, 0x20, 0xfd, 0xbf, 0x56, 0x41, 0xbb, 0xf8, 0x66,
	0x11, 0x71, 0x29, 0x7e, 0x7e, 0x97, 0xf4, 0x87, 0x88, 0xf2, 0xca, 0x0f, 0x11, 0x5b, 0xa0, 0x11,
	0xa3, 0xb0, 0x43, 0x13, 0x81, 0xb4, 0xfe, 0x88, 0x29, 0x96, 0x22, 0x11, 0x51, 0x1a, 0x7a, 0x84,
	0x0e, 0x09, 0xc1, 0xd5, 0xbc, 0x23, 0x1e, 0x13, 0x9e, 0x69, 0xd8, 0x84, 0x4b, 0xee, 0x2d, 0xd9,
	0xe0, 0xa7, 0x5e, 0x45, 0x89, 0x9a, 0xfa, 0xf0, 0x42, 0xb8, 0x0e, 0x82, 0xa4, 0x58, 0x7d, 0x1a,
	0x21, 0xc5, 0xee, 0xd2, 0x7c, 0x30, 0xaf, 0x6b, 0x8f, 0xcc, 0xeb, 0xf0, 0xf8, 0xbc, 0xde, 0x5a,
	0x99, 0xd7, 0x8b, 0x7d, 0xae, 0xbd, 0xfa, 0x42, 0xc3, 0x51, 0x9a, 0x7c, 0xa0, 0xb7, 0x1d, 0x0f,
	0x27, 0xec, 0x15, 0xbd, 0xed, 0xbe, 0x84, 0xce, 0x2c, 0xf0, 0x3c, 0x7c, 0x77, 0xf0, 0xaf, 0x0f,
	0x5d, 0xbe, 0x6f, 0x15, 0xc8, 0xbf, 0x3f, 0xec, 0x40, 0x8b, 0x1e, 0x1e, 0x4a, 0x84, 0xe7, 0x71,
	0x20, 0x88, 0x05, 0x68, 0x5e, 0x97, 0xb7, 0x8a, 0xaf, 0xa7, 0xf3, 0xba, 0xbc, 0x65, 0xf6, 0x17,
	0xd0, 0x8e, 0x64, 0x18, 0x44, 0xe9, 0x1e, 0x4f, 0x79, 0x84, 0x62, 0xac, 0xa0, 0x01, 0xc7, 0xdf,
	0x2b, 0x57, 0xcc, 0xd5, 0x98, 0xc2, 0x13, 0xff, 0xb1, 0x2b, 0xe6, 0x78, 0xb0, 0x66, 0x4e, 0x72,
	0x47, 0x43, 0x8a, 0x66, 0xd2, 0x37, 0x85, 0x88, 0x4a, 0x78, 0x5d, 0x85, 0x88, 0x8a, 0xf3, 0x63,
	0x0d, 0xba, 0xe7, 0x72, 0x36, 0x13, 0xfe, 0xec, 0xce, 0xa4, 0x0d, 0x8c, 0x0d, 0xa8, 0x47, 0x72,
	0x96, 0x97, 0x4d, 0x2d, 0x92, 0xb3, 0xcf, 0x15, 0x8d, 0xca, 0x46, 0x25, 0xcf, 0x86, 0xca, 0x58,
	0x35, 0xcf, 0x58, 0x6a, 0x50, 0xad, 0x60, 0x90, 0x01, 0x55, 0x0a, 0x32, 0x57, 0x03, 0x7d, 0xa3,
	0x91, 0xf4, 0x5e, 0x50, 0x55, 0xc0, 0x04, 0xa2, 0xe4, 0x9b, 0xfa, 0x31, 0x88, 0x09, 0xcc, 0x45,
	0xa8, 0x2c, 0xe7, 0xc3, 0xcd, 0xb7, 0x44, 0x3b, 0x05, 0xe9, 0xfc, 0xae, 0x08, 0xe5, 0xef, 0xe3,
	0x5c, 0x08, 0x93, 0xfe, 0x63, 0xd0, 0x33, 0x21, 0x61, 0xdb, 0x91, 0x8c, 0x63, 0xaa, 0x18, 0xcd,
	0x5c, 0x4b, 0xf1, 0x43, 0x86, 0x0b, 0xbf, 0x5a, 0xb5, 0x57, 0x7e, 0xb5, 0xda, 0xc4, 0xa0, 0x89,
	0x38, 0xf0, 0x55, 0xcd, 0x28, 0x0a, 0x73, 0x19, 0xba, 0x38, 0x59, 0xf9, 0x0b, 0x6f, 0x2a, 0x23,
	0x55, 0x2f, 0x2d, 0xc2, 0x4e, 0x09, 0x32, 0xf6, 0xe1, 0x69, 0x51, 0x84, 0x7d, 0xe1, 0xa2, 0x58,
	0x2b, 0xc8, 0xa5, 0xa3, 0x73, 0x7e, 0x40, 0x9f, 0xde, 0x3b, 0xa0, 0x9b, 0x50, 0x77, 0xec, 0x99,
	0x88, 0x6c, 0xf5, 0x32, 0x53, 0x14, 0xe2, 0x5e, 0x30, 0x75, 0x5c, 0xa9, 0xea, 0x41, 0x51, 0x6c,
	0x33, 0xbd, 0x8e, 0xd6, 0x53, 0x9b, 0x91, 0xc2, 0xfa, 0xcd, 0xea, 0xcf, 0xe6, 0x09, 0x95, 0x1e,
	0x05, 0x5c, 0x7e, 0x36, 0x3f, 0x48, 0x65, 0x84, 0x73, 0x34, 0x09, 0x6c, 0x72, 0x27, 0x60, 0x88,
	0x04, 0xd6, 0xa1, 0x26, 0x6c, 0xcf, 0xf1, 0x69, 0x1c, 0xd5, 0x4c, 0x26, 0xb2, 0x76, 0xdf, 0x2b,
	0xb4, 0x7b, 0x1d, 0x2a, 0xb1, 0xfc, 0x86, 0x46, 0xce, 0xaa, 0x89, 0x9f, 0xfb, 0x5f, 0x81, 0x96,
	0xfd, 0xac, 0x6a, 0xe8, 0xd0, 0xc6, 0xbf, 0xd6, 0x60, 0x78, 0x7c, 0x78, 0x39, 0x9e, 0xe8, 0x4f,
	0x8c, 0x26, 0x54, 0xcd, 0xc9, 0xc9, 0xb9, 0x5e, 0x32, 0x1a, 0x50, 0xf9, 0xc5, 0xf8, 0x42, 0x2f,
	0xef, 0xbf, 0x85, 0xce, 0xca, 0xe4, 0x69, 0xac, 0x41, 0x2b, 0x03, 0x7e, 0x39, 0xd0, 0x9f, 0xa0,
	0x9a, 0x0c, 0x38, 0x1c, 0x8f, 0xf4, 0xd2, 0xfe, 0x01, 0xb4, 0x0a, 0x53, 0xa2, 0xd1, 0x82, 0x46,
	0xbe, 0x45, 0x03, 0x2a, 0x83, 0xe1, 0x07, 0xbd, 0x64, 0x68, 0x50, 0xa3, 0x35, 0x7a, 0x79, 0xff,
	0x2f, 0x25, 0x68, 0x17, 0x5b, 0xbc, 0x61, 0x40, 0x57, 0xd1, 0xf9, 0xc2, 0x1e, 0xac, 0x17, 0x65,
	0xac, 0xb3, 0xe3, 0xe3, 0xf1, 0xe8, 0x74, 0xa8, 0x97, 0x8c, 0xe7, 0xf0, 0x6c, 0x95, 0x73, 0x4a,
	0x8c, 0xb2, 0xf1, 0x02, 0x36, 0x56, 0x18, 0xa7, 0x67, 0x13, 0x6b, 0xf8, 0x9b, 0x8b, 0x89, 0x5e,
	0x31, 0x36, 0xc1, 0x58, 0x61, 0x5d, 0x8c, 0x87, 0xc3, 0x73, 0xbd, 0x6a, 0x6c, 0x80, 0xbe, 0x82,
	0x0f, 0x4f, 0x07, 0xfa, 0x77, 0xa5, 0xfd, 0x7f, 0x97, 0xa0, 0x55, 0xb8, 0xc5, 0x0a, 0x5b, 0x52,
	0x38, 0x73, 0x2b, 0x73, 0xbd, 0xc4, 0x38, 0x36, 0xcf, 0x2e, 0x4f, 0x27, 0x7a, 0xc9, 0x58, 0xcf,
	0xf4, 0x12, 0xfe, 0xfe, 0xf0, 0xe8, 0x57, 0x7a, 0xd9, 0x78, 0x06, 0x6b, 0x45, 0xf4, 0x64, 0x34,
	0xd0, 0x2b, 0xc6, 0x16, 0x3c, 0x7f, 0xa8, 0x82, 0x57, 0x54, 0x0b, 0x2e, 0x29, 0x26, 0xfa, 0x84,
	0xeb, 0x6a, 0x85, 0x00, 0x65, 0x5b, 0x10, 0xa7, 0x6e, 0xec, 0xc0, 0xd6, 0x27, 0x34, 0x92, 0x40,
	0xc3, 0x58, 0x5f, 0xb5, 0x43, 0x39, 0x7d, 0x0a, 0x90, 0xcf, 0xb5, 0xe8, 0x59, 0x4e, 0x15, 0x3c,
	0x36, 0xa0, 0x5b, 0xc0, 0xcf, 0x47, 0x47, 0xec, 0x6d, 0x01, 0xfb, 0x30, 0x1a, 0x0c, 0xcf, 0xf4,
	0xf2, 0xfb, 0xda, 0xef, 0x2a, 0x22, 0x74, 0xce, 0x9f, 0x4c, 0xeb, 0xf4, 0xdf, 0x84, 0xaf, 0xff,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xb9, 0x9d, 0x99, 0x91, 0x18, 0x00, 0x00,
}
