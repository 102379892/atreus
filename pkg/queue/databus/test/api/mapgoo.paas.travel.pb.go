// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mapgoo.paas.travel.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//轨迹
type TrackInfoSimple struct {
	//里程
	Mileage uint32 `protobuf:"varint,1,opt,name=mileage,proto3" json:"mileage,omitempty"`
	//速度，仅GPS定位时有效，其它情况为0xFFFFFFFF	单位km/h
	Speed uint32 `protobuf:"varint,2,opt,name=speed,proto3" json:"speed,omitempty"`
	//方向，仅GPS定位时有效，其它情况为0xFFFFFFFF，单位：度
	Direction uint32 `protobuf:"varint,3,opt,name=direction,proto3" json:"direction,omitempty"`
	//纬度
	Lat int32 `protobuf:"varint,4,opt,name=lat,proto3" json:"lat,omitempty"`
	//经度
	Lng int32 `protobuf:"varint,5,opt,name=lng,proto3" json:"lng,omitempty"`
	//接收时间
	RecvTime uint64 `protobuf:"varint,6,opt,name=recv_time,json=recvTime,proto3" json:"recv_time,omitempty"`
	//定位时间
	GpsTime              uint64   `protobuf:"varint,7,opt,name=gps_time,json=gpsTime,proto3" json:"gps_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackInfoSimple) Reset()         { *m = TrackInfoSimple{} }
func (m *TrackInfoSimple) String() string { return proto.CompactTextString(m) }
func (*TrackInfoSimple) ProtoMessage()    {}
func (*TrackInfoSimple) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd08d488d96802, []int{0}
}

func (m *TrackInfoSimple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackInfoSimple.Unmarshal(m, b)
}
func (m *TrackInfoSimple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackInfoSimple.Marshal(b, m, deterministic)
}
func (m *TrackInfoSimple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackInfoSimple.Merge(m, src)
}
func (m *TrackInfoSimple) XXX_Size() int {
	return xxx_messageInfo_TrackInfoSimple.Size(m)
}
func (m *TrackInfoSimple) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackInfoSimple.DiscardUnknown(m)
}

var xxx_messageInfo_TrackInfoSimple proto.InternalMessageInfo

func (m *TrackInfoSimple) GetMileage() uint32 {
	if m != nil {
		return m.Mileage
	}
	return 0
}

func (m *TrackInfoSimple) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *TrackInfoSimple) GetDirection() uint32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *TrackInfoSimple) GetLat() int32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *TrackInfoSimple) GetLng() int32 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *TrackInfoSimple) GetRecvTime() uint64 {
	if m != nil {
		return m.RecvTime
	}
	return 0
}

func (m *TrackInfoSimple) GetGpsTime() uint64 {
	if m != nil {
		return m.GpsTime
	}
	return 0
}

//行程信息
type TravelInfo struct {
	//设备id
	ObjectId uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//行程id
	TravelId uint64 `protobuf:"varint,2,opt,name=travel_id,json=travelId,proto3" json:"travel_id,omitempty"`
	//行程标志 0：熄火 1：启动
	IsCompleted bool `protobuf:"varint,3,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	//行程里程
	TravelMileage uint32 `protobuf:"varint,4,opt,name=travel_mileage,json=travelMileage,proto3" json:"travel_mileage,omitempty"`
	//行程油耗
	TravelOil uint32 `protobuf:"varint,5,opt,name=travel_oil,json=travelOil,proto3" json:"travel_oil,omitempty"`
	//行程时长
	TravelPeriod uint32 `protobuf:"varint,6,opt,name=travel_period,json=travelPeriod,proto3" json:"travel_period,omitempty"`
	//驾驶时长
	DrivePeriod uint32 `protobuf:"varint,7,opt,name=drive_period,json=drivePeriod,proto3" json:"drive_period,omitempty"`
	//超速次数
	OverSpeedCount uint32 `protobuf:"varint,8,opt,name=over_speed_count,json=overSpeedCount,proto3" json:"over_speed_count,omitempty"`
	//急加速次数
	CelerateCount uint32 `protobuf:"varint,9,opt,name=celerate_count,json=celerateCount,proto3" json:"celerate_count,omitempty"`
	//急减速次数
	DecelerateCount uint32 `protobuf:"varint,10,opt,name=decelerate_count,json=decelerateCount,proto3" json:"decelerate_count,omitempty"`
	//停车未熄火次数
	StopAcconCount uint32 `protobuf:"varint,11,opt,name=stop_accon_count,json=stopAcconCount,proto3" json:"stop_accon_count,omitempty"`
	//
	StartFlag uint32 `protobuf:"varint,12,opt,name=start_flag,json=startFlag,proto3" json:"start_flag,omitempty"`
	//
	StopFlag uint32 `protobuf:"varint,13,opt,name=stop_flag,json=stopFlag,proto3" json:"stop_flag,omitempty"`
	//
	StartEventId uint64 `protobuf:"varint,14,opt,name=start_event_id,json=startEventId,proto3" json:"start_event_id,omitempty"`
	//
	StopEventId uint64 `protobuf:"varint,15,opt,name=stop_event_id,json=stopEventId,proto3" json:"stop_event_id,omitempty"`
	//
	StayId uint64 `protobuf:"varint,16,opt,name=stay_id,json=stayId,proto3" json:"stay_id,omitempty"`
	//备注
	Remark string `protobuf:"bytes,17,opt,name=remark,proto3" json:"remark,omitempty"`
	//平均速度
	AvgSpeed uint32 `protobuf:"varint,18,opt,name=avg_speed,json=avgSpeed,proto3" json:"avg_speed,omitempty"`
	//最大速度
	MaxSpeed uint32 `protobuf:"varint,19,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed,omitempty"`
	//
	PosCount uint32 `protobuf:"varint,20,opt,name=pos_count,json=posCount,proto3" json:"pos_count,omitempty"`
	//
	TotalSpeed uint32 `protobuf:"varint,21,opt,name=total_speed,json=totalSpeed,proto3" json:"total_speed,omitempty"`
	//故障个数
	BdCount uint32 `protobuf:"varint,22,opt,name=bd_count,json=bdCount,proto3" json:"bd_count,omitempty"`
	//故障码
	BdCode string `protobuf:"bytes,23,opt,name=bd_code,json=bdCode,proto3" json:"bd_code,omitempty"`
	//
	SeqFaultCode []string `protobuf:"bytes,24,rep,name=seq_fault_code,json=seqFaultCode,proto3" json:"seq_fault_code,omitempty"`
	//行程启动信息
	StartPos *TrackInfoSimple `protobuf:"bytes,25,opt,name=start_pos,json=startPos,proto3" json:"start_pos,omitempty"`
	//行程停止信息
	StopPos              *TrackInfoSimple `protobuf:"bytes,26,opt,name=stop_pos,json=stopPos,proto3" json:"stop_pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TravelInfo) Reset()         { *m = TravelInfo{} }
func (m *TravelInfo) String() string { return proto.CompactTextString(m) }
func (*TravelInfo) ProtoMessage()    {}
func (*TravelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd08d488d96802, []int{1}
}

func (m *TravelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TravelInfo.Unmarshal(m, b)
}
func (m *TravelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TravelInfo.Marshal(b, m, deterministic)
}
func (m *TravelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TravelInfo.Merge(m, src)
}
func (m *TravelInfo) XXX_Size() int {
	return xxx_messageInfo_TravelInfo.Size(m)
}
func (m *TravelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TravelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TravelInfo proto.InternalMessageInfo

func (m *TravelInfo) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *TravelInfo) GetTravelId() uint64 {
	if m != nil {
		return m.TravelId
	}
	return 0
}

func (m *TravelInfo) GetIsCompleted() bool {
	if m != nil {
		return m.IsCompleted
	}
	return false
}

func (m *TravelInfo) GetTravelMileage() uint32 {
	if m != nil {
		return m.TravelMileage
	}
	return 0
}

func (m *TravelInfo) GetTravelOil() uint32 {
	if m != nil {
		return m.TravelOil
	}
	return 0
}

func (m *TravelInfo) GetTravelPeriod() uint32 {
	if m != nil {
		return m.TravelPeriod
	}
	return 0
}

func (m *TravelInfo) GetDrivePeriod() uint32 {
	if m != nil {
		return m.DrivePeriod
	}
	return 0
}

func (m *TravelInfo) GetOverSpeedCount() uint32 {
	if m != nil {
		return m.OverSpeedCount
	}
	return 0
}

func (m *TravelInfo) GetCelerateCount() uint32 {
	if m != nil {
		return m.CelerateCount
	}
	return 0
}

func (m *TravelInfo) GetDecelerateCount() uint32 {
	if m != nil {
		return m.DecelerateCount
	}
	return 0
}

func (m *TravelInfo) GetStopAcconCount() uint32 {
	if m != nil {
		return m.StopAcconCount
	}
	return 0
}

func (m *TravelInfo) GetStartFlag() uint32 {
	if m != nil {
		return m.StartFlag
	}
	return 0
}

func (m *TravelInfo) GetStopFlag() uint32 {
	if m != nil {
		return m.StopFlag
	}
	return 0
}

func (m *TravelInfo) GetStartEventId() uint64 {
	if m != nil {
		return m.StartEventId
	}
	return 0
}

func (m *TravelInfo) GetStopEventId() uint64 {
	if m != nil {
		return m.StopEventId
	}
	return 0
}

func (m *TravelInfo) GetStayId() uint64 {
	if m != nil {
		return m.StayId
	}
	return 0
}

func (m *TravelInfo) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *TravelInfo) GetAvgSpeed() uint32 {
	if m != nil {
		return m.AvgSpeed
	}
	return 0
}

func (m *TravelInfo) GetMaxSpeed() uint32 {
	if m != nil {
		return m.MaxSpeed
	}
	return 0
}

func (m *TravelInfo) GetPosCount() uint32 {
	if m != nil {
		return m.PosCount
	}
	return 0
}

func (m *TravelInfo) GetTotalSpeed() uint32 {
	if m != nil {
		return m.TotalSpeed
	}
	return 0
}

func (m *TravelInfo) GetBdCount() uint32 {
	if m != nil {
		return m.BdCount
	}
	return 0
}

func (m *TravelInfo) GetBdCode() string {
	if m != nil {
		return m.BdCode
	}
	return ""
}

func (m *TravelInfo) GetSeqFaultCode() []string {
	if m != nil {
		return m.SeqFaultCode
	}
	return nil
}

func (m *TravelInfo) GetStartPos() *TrackInfoSimple {
	if m != nil {
		return m.StartPos
	}
	return nil
}

func (m *TravelInfo) GetStopPos() *TrackInfoSimple {
	if m != nil {
		return m.StopPos
	}
	return nil
}

func init() {
	proto.RegisterType((*TrackInfoSimple)(nil), "mapgoo.paas.travel.TrackInfoSimple")
	proto.RegisterType((*TravelInfo)(nil), "mapgoo.paas.travel.TravelInfo")
}

func init() { proto.RegisterFile("mapgoo.paas.travel.proto", fileDescriptor_09fd08d488d96802) }

var fileDescriptor_09fd08d488d96802 = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcd, 0x6e, 0xd4, 0x3a,
	0x14, 0xc7, 0x95, 0x4e, 0x67, 0x32, 0x73, 0xe6, 0xa3, 0x73, 0x7d, 0x7b, 0x5b, 0xf7, 0xde, 0x5b,
	0x31, 0xb4, 0x20, 0x85, 0xcd, 0x2c, 0x60, 0x8f, 0x80, 0x8a, 0x4a, 0xb3, 0x40, 0x54, 0x69, 0x57,
	0x6c, 0x22, 0x4f, 0xe2, 0x46, 0xa6, 0x49, 0x9c, 0xda, 0x6e, 0x54, 0xde, 0x88, 0x77, 0xe0, 0xe5,
	0x90, 0xcf, 0x71, 0x5a, 0xa9, 0xb0, 0x60, 0x17, 0xff, 0xfe, 0xff, 0x73, 0x7c, 0x3e, 0x14, 0x03,
	0xaf, 0x45, 0x5b, 0x6a, 0xbd, 0x6e, 0x85, 0xb0, 0x6b, 0x67, 0x44, 0x27, 0xab, 0x75, 0x6b, 0xb4,
	0xd3, 0x8c, 0xfd, 0xaa, 0x9c, 0xfc, 0x88, 0x60, 0xef, 0xca, 0x88, 0xfc, 0x66, 0xd3, 0x5c, 0xeb,
	0x4b, 0x55, 0xb7, 0x95, 0x64, 0x1c, 0xe2, 0x5a, 0x55, 0x52, 0x94, 0x92, 0x47, 0xab, 0x28, 0x99,
	0xa7, 0xfd, 0x91, 0xed, 0xc3, 0xd0, 0xb6, 0x52, 0x16, 0x7c, 0x07, 0x39, 0x1d, 0xd8, 0xff, 0x30,
	0x29, 0x94, 0x91, 0xb9, 0x53, 0xba, 0xe1, 0x03, 0x54, 0x1e, 0x01, 0x5b, 0xc2, 0xa0, 0x12, 0x8e,
	0xef, 0xae, 0xa2, 0x64, 0x98, 0xfa, 0x4f, 0x24, 0x4d, 0xc9, 0x87, 0x81, 0x34, 0x25, 0xfb, 0x0f,
	0x26, 0x46, 0xe6, 0x5d, 0xe6, 0x54, 0x2d, 0xf9, 0x68, 0x15, 0x25, 0xbb, 0xe9, 0xd8, 0x83, 0x2b,
	0x55, 0x4b, 0x76, 0x04, 0xe3, 0xb2, 0xb5, 0xa4, 0xc5, 0xa8, 0xc5, 0x65, 0x6b, 0xbd, 0x74, 0xf2,
	0x3d, 0x06, 0xb8, 0xc2, 0x46, 0x7c, 0xf9, 0x3e, 0x8d, 0xde, 0x7e, 0x95, 0xb9, 0xcb, 0x54, 0x11,
	0x4a, 0x1f, 0x13, 0xd8, 0x14, 0x5e, 0xa4, 0x9e, 0xbd, 0xb8, 0x43, 0x77, 0x10, 0xd8, 0x14, 0xec,
	0x39, 0xcc, 0x94, 0xcd, 0x72, 0xed, 0xfb, 0x77, 0xb2, 0xc0, 0x2e, 0xc6, 0xe9, 0x54, 0xd9, 0xb3,
	0x1e, 0xb1, 0x97, 0xb0, 0x08, 0xf1, 0xfd, 0x70, 0x76, 0xf1, 0x86, 0x39, 0xd1, 0x4f, 0x61, 0x44,
	0xc7, 0x00, 0xc1, 0xa6, 0x55, 0x85, 0x3d, 0xce, 0xd3, 0x70, 0xf1, 0x67, 0x55, 0xb1, 0x53, 0x08,
	0xfe, 0xac, 0x95, 0x46, 0xe9, 0x02, 0xbb, 0x9d, 0xa7, 0x33, 0x82, 0x17, 0xc8, 0x7c, 0x35, 0x85,
	0x51, 0x9d, 0xec, 0x3d, 0x31, 0x7a, 0xa6, 0xc8, 0x82, 0x25, 0x81, 0xa5, 0xee, 0xa4, 0xc9, 0x70,
	0x03, 0x59, 0xae, 0xef, 0x1a, 0xc7, 0xc7, 0x68, 0x5b, 0x78, 0x7e, 0xe9, 0xf1, 0x99, 0xa7, 0xbe,
	0xee, 0x5c, 0x56, 0xd2, 0x08, 0x27, 0x83, 0x6f, 0x42, 0x75, 0xf7, 0x94, 0x6c, 0xaf, 0x60, 0x59,
	0xc8, 0x27, 0x46, 0x40, 0xe3, 0xde, 0x23, 0x27, 0x6b, 0x02, 0x4b, 0xeb, 0x74, 0x9b, 0x89, 0x3c,
	0xd7, 0x4d, 0xb0, 0x4e, 0xe9, 0x6e, 0xcf, 0xdf, 0x7b, 0x4c, 0xce, 0x63, 0x00, 0xeb, 0x84, 0x71,
	0xd9, 0x75, 0x25, 0x4a, 0x3e, 0xa3, 0x61, 0x20, 0x39, 0xaf, 0x04, 0xae, 0x1d, 0x13, 0xa1, 0x3a,
	0xa7, 0x7d, 0x79, 0x80, 0xe2, 0x0b, 0x58, 0x50, 0xac, 0xec, 0x64, 0x83, 0x1b, 0x5d, 0xe0, 0xd2,
	0x66, 0x48, 0x3f, 0x7a, 0xb8, 0x29, 0xd8, 0x09, 0xcc, 0x31, 0xc5, 0x83, 0x69, 0x0f, 0x4d, 0x53,
	0x0f, 0x7b, 0xcf, 0x21, 0xc4, 0xd6, 0x89, 0x6f, 0x5e, 0x5d, 0xa2, 0x3a, 0xf2, 0xc7, 0x4d, 0xc1,
	0x0e, 0x60, 0x64, 0x64, 0x2d, 0xcc, 0x0d, 0xff, 0x6b, 0x15, 0x25, 0x93, 0x34, 0x9c, 0x7c, 0x5d,
	0xa2, 0x2b, 0x69, 0xb6, 0x9c, 0x51, 0x5d, 0xa2, 0x2b, 0x71, 0xa8, 0x5e, 0xac, 0xc5, 0x7d, 0x10,
	0xff, 0x26, 0xb1, 0x16, 0xf7, 0x0f, 0x62, 0xab, 0x6d, 0x98, 0xc9, 0x3e, 0x89, 0xad, 0xb6, 0x34,
	0x8d, 0x67, 0x30, 0x75, 0xda, 0x89, 0x2a, 0xc4, 0xfe, 0x83, 0x32, 0x20, 0xa2, 0xe8, 0x23, 0x18,
	0x6f, 0xfb, 0x65, 0x1e, 0xd0, 0x9f, 0xb7, 0x0d, 0x5b, 0x3c, 0x84, 0x18, 0xa5, 0x42, 0xf2, 0x43,
	0xaa, 0xd5, 0x2b, 0x85, 0xc4, 0x31, 0xc9, 0xdb, 0xec, 0x5a, 0xdc, 0x55, 0x8e, 0x74, 0xbe, 0x1a,
	0x24, 0x93, 0x74, 0x66, 0xe5, 0xed, 0xb9, 0x87, 0xe8, 0x7a, 0x07, 0x34, 0xf6, 0xac, 0xd5, 0x96,
	0x1f, 0xad, 0xa2, 0x64, 0xfa, 0xfa, 0x74, 0xfd, 0x9b, 0x87, 0xe2, 0xc9, 0x53, 0xe0, 0xd7, 0x21,
	0x8c, 0xbb, 0xd0, 0x96, 0xbd, 0x05, 0x5c, 0x0d, 0x26, 0xf8, 0xf7, 0xcf, 0x13, 0xc4, 0x3e, 0xe8,
	0x42, 0xdb, 0x0f, 0xc3, 0x2f, 0x03, 0xd1, 0xaa, 0xed, 0x08, 0x9f, 0xa2, 0x37, 0x3f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xe0, 0x3e, 0xdb, 0x8c, 0xa6, 0x04, 0x00, 0x00,
}
